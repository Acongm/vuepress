"use strict";(self.webpackChunkmd_vuepress=self.webpackChunkmd_vuepress||[]).push([[1214],{2108:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-3ff2f74f",path:"/webpack/install/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"node 包管理",slug:"node-包管理",children:[{level:3,title:"npm",slug:"npm",children:[]},{level:3,title:"yarn",slug:"yarn",children:[]},{level:3,title:"node 包的安装",slug:"node-包的安装",children:[]},{level:3,title:"包依赖关系",slug:"包依赖关系",children:[]},{level:3,title:"lock 文件",slug:"lock-文件",children:[]},{level:3,title:"验证实例",slug:"验证实例",children:[]}]}],git:{updatedTime:1745609748e3},filePathRelative:"webpack/install/README.md"}},9651:(n,s,e)=>{e.r(s),e.d(s,{default:()=>p});const a=(0,e(6252).uE)('<h2 id="node-包管理" tabindex="-1"><a class="header-anchor" href="#node-包管理" aria-hidden="true">#</a> node 包管理</h2><blockquote><p>包是一段可以复用的代码，这段代码可以从全局注册表下载到开发者的本地环境。每个包可能会，也可能不会依赖于别的包。简单地说，包管理器是一段代码，它可以让你管理依赖（你或者他人写的外部代码），你的项目需要这些依赖来正确运行。</p></blockquote><p>为啥我们需要一个包管理工具呢？因为我们在<code>Node.js</code>上开发时，会用到很多别人写的<code>JavaScript</code>代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。</p><p>更重要的是，如果我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 C 和模块 D，<code>npm</code>可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p><p>于是一个集中管理的工具应运而生：</p><ol><li>大家都把自己开发的模块打包后放到<code>npm</code>官网上，如果要使用，直接通过<code>npm</code>安装就可以直接用，不用管代码存在哪，应该从哪下载。</li><li><code>Yarn</code> 是为了弥补<code>npm</code> 的一些缺陷[速度慢，稳定性高]而出现的。”</li></ol><h3 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h3><blockquote><p><code>npm</code> 为你和你的团队打开了连接整个 <code>JavaScript</code> 天才世界的一扇大门。它是世界上最大的软件注册表，每星期大约有 30 亿次的下载量，包含超过 600000 个 包（<code>package</code>） （即，代码模块）。来自各大洲的开源软件开发者使用 <code>npm</code> 互相分享和借鉴。包的结构使您能够轻松跟踪依赖项和版本。</p></blockquote><p>下面是关于 <code>npm</code> 的快速介绍：<code>npm</code> 由三个独立的部分组成：</p><ul><li>网站 网站 是开发者查找包（<code>package</code>）、设置参数以及管理 <code>npm</code> 使用体验的主要途径。</li><li>注册表（<code>registry</code>） 注册表 是一个巨大的数据库，保存了每个包（<code>package</code>）的信息。</li><li>命令行工具 (<code>CLI</code>) <code>CLI</code> 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道。</li></ul><h3 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn" aria-hidden="true">#</a> yarn</h3><p><code>Yarn</code>发布于 2016 年 10 月，并在<code>Github</code>上迅速拥有了 2.4 万个 Star。而<code>npm</code>只有 1.2 万个<code>star</code>。这个项目由一些高级开发人员维护，包括了<code>Sebastian McKenzie</code>（Babel.js）和<code>Yehuda Katz</code>（Ember.js、Rust、Bundler 等）。</p><blockquote><p><code>Yarn</code>一开始的主要目标是解决上一节中描述的由于语义版本控制而导致的 npm 安装的不确定性问题。虽然可以使用<code>npm shrinkwrap</code>来实现可预测的依赖关系树，但它并不是默认选项，而是取决于所有的开发人员知道并且启用这个选项。 Yarn 采取了不同的做法。每个<code>yarn</code>安装都会生成一个类似于<code>npm-shrinkwrap.json</code>的<code>yarn.lock</code>文件，而且它是默认创建的。除了常规信息之外，<code>yarn.lock</code>文件还包含要安装的内容的校验和，以确保使用的库的版本相同。</p></blockquote><p>yarn 的优化主要体现在：</p><ol><li>速度快 ： <ul><li>并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm 是按照队列执行每个 package，也就是说必须要等到当前 package 安装完成之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。</li><li>离线模式：如果之前已经安装过一个软件包，用 Yarn 再次安装时之间从缓存中获取，就不用像 npm 那样再从网络下载了。</li></ul></li><li>安装版本统一：为了防止拉取到不同的版本，<code>Yarn</code> 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）<code>yarn.lock</code> 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。</li><li>更好的语义化： <code>yarn</code>改变了一些<code>npm</code>命令的名称，比如 <code>yarn add/remove</code>，感觉上比 npm 原本的 <code>install/uninstall</code> 要更清晰。</li></ol><h3 id="node-包的安装" tabindex="-1"><a class="header-anchor" href="#node-包的安装" aria-hidden="true">#</a> node 包的安装</h3><ol><li>执行工程自身 <code>preinstall</code><ul><li>当前 npm 工程如果定义了<code> preinstall</code> 钩子此时会被执行。</li></ul></li><li>确定首层依赖 <ul><li>模块首先需要做的是确定工程中的首层依赖，也就是 <code>dependencies</code> 和 <code>devDependencies</code> 属性中直接指定的模块（假设此时没有添加 <code>npm install</code> 参数）。工程本身是整棵依赖树的根节点，每个首层依赖模块都是根节点下面的一棵子树，npm 会开启多进程从每个首层依赖模块开始逐步寻找更深层级的节点。</li></ul></li><li>获取模块 <ul><li>获取模块是一个递归的过程，分为以下几步：</li><li>获取模块信息。在下载一个模块之前，首先要确定其版本，这是因为 <code>package.json</code> 中往往是 <code>semantic version</code>（semver，语义化版本）。此时如果版本描述文件（<code>npm-shrinkwrap.json</code> 或 <code>package-lock.json</code>）中有该模块信息直接拿即可，如果没有则从仓库获取。如<code> packaeg.json</code> 中某个包的版本是 <code>^1.1.0，npm</code> 就会去仓库中获取符合 <code>1.x.x</code> 形式的最新版本。</li><li>获取模块实体。上一步会获取到模块的压缩包地址（<code>resolved</code> 字段），npm 会用此地址检查本地缓存，缓存中有就直接拿，如果没有则从仓库下载。</li><li>查找该模块依赖，如果有依赖则回到第 1 步，如果没有则停止。</li></ul></li><li>模块扁平化（<code>dedupe</code>） <ul><li>上一步获取到的是一棵完整的依赖树，其中可能包含大量重复模块。比如 A 模块依赖于 <code>loadsh</code>，B 模块同样依赖于 <code>lodash</code>。在 npm3 以前会严格按照依赖树的结构进行安装，因此会造成模块冗余。<code>yarn</code>和从 <code>npm5</code> 开始默认加入了一个 <code>dedupe</code> 的过程。它会遍历所有节点，逐个将模块放在根节点下面，也就是<code> node-modules</code> 的第一层。当发现有重复模块时，则将其丢弃。这里需要对重复模块进行一个定义，它指的是模块名相同且 <code>semver</code> 兼容。每个 <code>semver</code> 都对应一段版本允许范围，如果两个模块的版本允许范围存在交集，那么就可以得到一个兼容版本，而不必版本号完全一致，这可以使更多冗余模块在 <code>dedupe</code> 过程中被去掉。</li></ul></li><li>安装模块 <ul><li>这一步将会更新工程中的<code>node_modules</code>，并执行模块中的生命周期函数（按照 <code>preinstall、install、postinstall</code> 的顺序）。</li></ul></li><li>执行工程自身生命周期 <ul><li>当前 npm 工程如果定义了钩子此时会被执行（按照 <code>install、postinstall、prepublish、prepare</code> 的顺序）。</li></ul></li></ol><h3 id="包依赖关系" tabindex="-1"><a class="header-anchor" href="#包依赖关系" aria-hidden="true">#</a> 包依赖关系</h3><p>我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 C 和模块 D，npm 可以根据依赖关系，把所有依赖的包都下载下来并管理起来，而这种依赖又有不一样的表现形式。</p><ol><li>嵌套依赖</li><li>扁平依赖</li></ol><h4 id="嵌套依赖" tabindex="-1"><a class="header-anchor" href="#嵌套依赖" aria-hidden="true">#</a> 嵌套依赖</h4><p>假设目前工程依赖 A, B, C 三个库，而他们对某个库 <code>somelib</code> 存在这样的依赖关系：</p><div class="language-apache ext-apache line-numbers-mode"><pre class="language-apache"><code>A - somelib 1.4.x\nB - somelib 1.6.x\nC - somelib 1.6.x\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果要安装 ABC 三个库，那么 <code>somelib</code> 会存在版本冲突。<code>npm5+/yarn</code> 会在实际安装时，给三个库分别下载各自依赖的 <code>somelib</code> 版本。假设 npm 先安装了 A, 由于 A 依赖<code> somelib 1.4.x</code> 版本，那么 自身依赖先安装<code>1.4.x </code>。再安装 B, C 时，由于 B, C 依赖的都不是<code> 1.4.x</code>, 于是安装完之后，关系就变成这个样子了：</p><div class="language-llvm ext-llvm line-numbers-mode"><pre class="language-llvm"><code><span class="token keyword">node_modules</span>\n├── A\n│   └── <span class="token keyword">node_modules</span>\n│       └── <span class="token keyword">somelib</span> <span class="token number">1.4</span><span class="token punctuation">.</span><span class="token keyword">x</span>\n├── B\n│   └── <span class="token keyword">node_modules</span>\n│       └── <span class="token keyword">somelib</span> <span class="token number">1.6</span><span class="token punctuation">.</span><span class="token keyword">x</span>\n└── C\n    └── <span class="token keyword">node_modules</span>\n        └── <span class="token keyword">somelib</span> <span class="token number">1.6</span><span class="token punctuation">.</span><span class="token keyword">x</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样就是嵌套依赖。 很显然这种方式很大的浪费了磁盘空间。</p><h4 id="扁平依赖" tabindex="-1"><a class="header-anchor" href="#扁平依赖" aria-hidden="true">#</a> 扁平依赖</h4><p>当关联依赖中包括对某个软件包的重复引用，在实际安装时将尽量避免重复的创建。</p><p>假设目前工程依赖 A, B, C 三个库，而他们对某个库 <code>somelib</code> 存在这样的依赖关系：</p><div class="language-apache ext-apache line-numbers-mode"><pre class="language-apache"><code>A - somelib 1.4.x\nB - somelib 1.6.x\nC - somelib 1.6.x\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果要安装 ABC 三个库，那么 <code>somelib</code> 会存在版本冲突。<code>npm5+/yarn</code> 会在实际安装时，给三个库分别下载各自依赖的 <code>somelib</code> 版本。假设 npm 先安装了 A, 由于 A 依赖<code> somelib 1.4.x</code> 版本，那么 <code>1.4.x </code>会变成主版本。再安装 B, C 时，由于 B, C 依赖的都不是<code> 1.4.x</code>, 于是安装完之后，关系就变成这个样子了：</p><div class="language-llvm ext-llvm line-numbers-mode"><pre class="language-llvm"><code><span class="token keyword">node_modules</span>\n├── A\n├── <span class="token keyword">somelib</span> <span class="token number">1.4</span><span class="token punctuation">.</span><span class="token keyword">x</span>\n├── B\n│   └── <span class="token keyword">node_modules</span>\n│       └── <span class="token keyword">somelib</span> <span class="token number">1.6</span><span class="token punctuation">.</span><span class="token keyword">x</span>\n└── C\n    └── <span class="token keyword">node_modules</span>\n        └── <span class="token keyword">somelib</span> <span class="token number">1.6</span><span class="token punctuation">.</span><span class="token keyword">x</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样就是扁平依赖。</p><blockquote><p>需要注意的是，明明 B, C 都依赖 1.6.x 版本，实际上 <code>npm5+/yarn</code> 却要把这个版本保存两次，这样明显是对磁盘空间的浪费。我们把这种情况就称为不完全扁平的。目前这种情况还无法安全解决。</p></blockquote><h3 id="lock-文件" tabindex="-1"><a class="header-anchor" href="#lock-文件" aria-hidden="true">#</a> lock 文件</h3><blockquote><p>锁文件是由包管理器自动生成的。它包含了重现全部的依赖源码树需要的所有信息、你的项目依赖中的所有信息，以及它们各自的版本。</p></blockquote><p>现在值得强调的是，<code>Yarn</code> 使用了锁文件，而<code> npm5</code>以前没有默认锁文件，<code>npm5</code>之后加入了默认锁文件功能。我们会谈到这种差别导致的一些后果。既然我已经向你介绍了包管理器这部分，现在我们来讨论依赖本身。</p><p>目前常见的两种 lock 文件：</p><ol><li><code>packahe-lock.json</code> 是 npm5 之后默认生成的锁文件</li><li><code>yarn.lock</code> 是 yarn 的锁文件</li></ol><h4 id="packahe-lock-json-解析" tabindex="-1"><a class="header-anchor" href="#packahe-lock-json-解析" aria-hidden="true">#</a> packahe-lock.json 解析</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;package-name&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lockfileVersion&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;cacache&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;9.2.6&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/cacache/-/cacache-9.2.6.tgz&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;integrity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha512-YK0Z5Np5t755edPL6gfdCeGxtU0rcW/DBhYhYVDckT+7AFkCCtedf2zru5NRbBLFk6e7Agi/RaqTOAfiaipUfg==&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;duplexify&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.5.0&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/duplexify/-/duplexify-3.5.0.tgz&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;integrity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha1-GqdzAC4VeEV+nZ1KULDMquvL1gQ=&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;end-of-stream&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n          <span class="token property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.0.0.tgz&quot;</span><span class="token punctuation">,</span>\n          <span class="token property">&quot;integrity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha1-1FlucCc0qT5A6a+GQxnqvZn/Lw4=&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>可以看出来，package-lock.json 把所有的包的依赖顺序列出来，第一次出现的包名会提升到顶层，后面重复出现的将会放入被依赖包的 node_modules 当中。引起不完全扁平化问题。</p><h4 id="yarn-lock-解析" tabindex="-1"><a class="header-anchor" href="#yarn-lock-解析" aria-hidden="true">#</a> yarn.lock 解析</h4><div class="language-apache ext-apache line-numbers-mode"><pre class="language-apache"><code># THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\npackage-1@^1.0.0:\n  version &quot;1.0.3&quot;\n  resolved &quot;https://registry.npmjs.org/package-1/-/package-1-1.0.3.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0&quot;\npackage-2@^2.0.0:\n  version &quot;2.0.1&quot;\n  resolved &quot;https://registry.npmjs.org/package-2/-/package-2-2.0.1.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0&quot;\n  dependencies:\n    package-4 &quot;^4.0.0&quot;\npackage-3@^3.0.0:\n  version &quot;3.1.9&quot;\n  resolved &quot;https://registry.npmjs.org/package-3/-/package-3-3.1.9.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0&quot;\n  dependencies:\n    package-4 &quot;^4.5.0&quot;\npackage-4@^4.0.0, package-4@^4.5.0:\n  version &quot;4.6.3&quot;\n  resolved &quot;https://registry.npmjs.org/package-4/-/package-4-2.6.3.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>显然 yarn.lock 锁文件把所有的依赖包都扁平化的展示了出来，对于同名包但是 semver 不兼容的作为不同的字段放在了 yarn.lock 的同一级结构中。</p><h3 id="验证实例" tabindex="-1"><a class="header-anchor" href="#验证实例" aria-hidden="true">#</a> 验证实例</h3><p>在一个测试 package 工程里面，安装了以下三个包，安装了 react-router 3.2.1，另外安装了 react-router-dom 4.3.1 和 react-router-native 4.3.0，这两个都依赖&quot;react-router&quot;: &quot;^4.3.0&quot;，结果如下： . └── node_modules</p><div class="language-gcode ext-gcode line-numbers-mode"><pre class="language-gcode"><code>├── react-router-dom4.3.1\n│   └── react-router4.3.1\n├── react-router-native4.3.0\n│   └── react-router4.3.1\n└── react-router3.2.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>查看 package-lock.json 结果和最后 node_modules 安装结果：</p><p><img src="https://segmentfault.com/img/bVbjN9R?w=2024&amp;h=2010" alt="clipboard.png"><img src="https://segmentfault.com/img/bVbjObA?w=2588&amp;h=2080" alt="图片描述"></p><p>查看 yarn.lock 结果和最后 node_modules 安装结果：</p><p><img src="https://segmentfault.com/img/bVbjObP?w=2044&amp;h=2034" alt="图片描述"></p><p><img src="https://segmentfault.com/img/bVbjObV?w=2304&amp;h=2808" alt="图片描述"></p>',53),o={},p=(0,e(3744).Z)(o,[["render",function(n,s){return a}]])},3744:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);