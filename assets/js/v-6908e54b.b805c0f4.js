"use strict";(self.webpackChunkmd_vuepress=self.webpackChunkmd_vuepress||[]).push([[5951],{930:(a,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s={key:"v-6908e54b",path:"/vue/vue2.html",title:"vue 原理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1、组件化",slug:"_1、组件化",children:[]},{level:2,title:"2、响应式",slug:"_2、响应式",children:[]},{level:2,title:"3、vdom 和 diff",slug:"_3、vdom-和-diff",children:[]},{level:2,title:"4、模版编译",slug:"_4、模版编译",children:[]},{level:2,title:"5、渲染过程",slug:"_5、渲染过程",children:[]},{level:2,title:"6、前端路由",slug:"_6、前端路由",children:[]},{level:2,title:"7、vue 面试真题演练",slug:"_7、vue-面试真题演练",children:[{level:3,title:"1、v-show 和 v-if 的区别",slug:"_1、v-show-和-v-if-的区别",children:[]},{level:3,title:"为何在 v-for 中使用 key",slug:"为何在-v-for-中使用-key",children:[]},{level:3,title:"描述 Vue 组件生命周期（父子组件）",slug:"描述-vue-组件生命周期-父子组件",children:[]},{level:3,title:"Vue 组件如何通讯（常见）",slug:"vue-组件如何通讯-常见",children:[]},{level:3,title:"描述组件渲染和更新的过程",slug:"描述组件渲染和更新的过程",children:[]},{level:3,title:"双向数据绑定 v-model 的实现原理",slug:"双向数据绑定-v-model-的实现原理",children:[]},{level:3,title:"对于 MVVM 的理解",slug:"对于-mvvm-的理解",children:[]},{level:3,title:"computed 有何特点",slug:"computed-有何特点",children:[]},{level:3,title:"为何组件 data 必须是一个函数？",slug:"为何组件-data-必须是一个函数",children:[]},{level:3,title:"ajax 请求应该放在哪个生命周期",slug:"ajax-请求应该放在哪个生命周期",children:[]},{level:3,title:"如何将组件所有 props 传递给子组件？",slug:"如何将组件所有-props-传递给子组件",children:[]},{level:3,title:"如何自己实现 v-model",slug:"如何自己实现-v-model",children:[]},{level:3,title:"多个组件有相同的逻辑，如何抽离？",slug:"多个组件有相同的逻辑-如何抽离",children:[]},{level:3,title:"为何要使用异步组件？",slug:"为何要使用异步组件",children:[]},{level:3,title:"何时使用 keep-alive？",slug:"何时使用-keep-alive",children:[]},{level:3,title:"何时需要使用 beforeDestory",slug:"何时需要使用-beforedestory",children:[]},{level:3,title:"什么是作用域插槽",slug:"什么是作用域插槽",children:[]},{level:3,title:"vuex 中 action 和 mutation 有何区别",slug:"vuex-中-action-和-mutation-有何区别",children:[]},{level:3,title:"vue-router 常用的路由模式",slug:"vue-router-常用的路由模式",children:[]},{level:3,title:"如何配置 vue-router 异步加载",slug:"如何配置-vue-router-异步加载",children:[]},{level:3,title:"请用 vnode 描述一个 DOM 结构",slug:"请用-vnode-描述一个-dom-结构",children:[]},{level:3,title:"监听 data 变化的核心 API 是什么",slug:"监听-data-变化的核心-api-是什么",children:[]},{level:3,title:"Vue 如何监听数组变化",slug:"vue-如何监听数组变化",children:[]},{level:3,title:"请描述响应式原理",slug:"请描述响应式原理",children:[]},{level:3,title:"diff 算法的时间复杂度",slug:"diff-算法的时间复杂度",children:[]},{level:3,title:"简述 diff 算法过程",slug:"简述-diff-算法过程",children:[]},{level:3,title:"vue 为何是异步渲染， $nextTick 何用",slug:"vue-为何是异步渲染-nexttick-何用",children:[]},{level:3,title:"Vue 常见性能优化方式",slug:"vue-常见性能优化方式",children:[]}]}],git:{updatedTime:1641571936e3},filePathRelative:"vue/vue2.md"}},9310:(a,n,e)=>{e.r(n),e.d(n,{default:()=>t});const s=(0,e(6252).uE)('<h1 id="vue-原理" tabindex="-1"><a class="header-anchor" href="#vue-原理" aria-hidden="true">#</a> vue 原理</h1><h2 id="_1、组件化" tabindex="-1"><a class="header-anchor" href="#_1、组件化" aria-hidden="true">#</a> 1、组件化</h2><ul><li>组件化的历史</li><li>数据驱动视图</li><li>MVVM</li></ul><h2 id="_2、响应式" tabindex="-1"><a class="header-anchor" href="#_2、响应式" aria-hidden="true">#</a> 2、响应式</h2><ul><li>核心 api Object.defineproperty</li><li>监听对象（深度），监听数组</li><li>Object.defineproperty 的缺点（vue3 用 Proxy）</li></ul><h2 id="_3、vdom-和-diff" tabindex="-1"><a class="header-anchor" href="#_3、vdom-和-diff" aria-hidden="true">#</a> 3、vdom 和 diff</h2><ul><li>应用背景</li><li>vnode 结构</li><li>snabbdom 使用：vnode h patch</li></ul><h2 id="_4、模版编译" tabindex="-1"><a class="header-anchor" href="#_4、模版编译" aria-hidden="true">#</a> 4、模版编译</h2><ul><li>with 语法</li><li>模版编译为 render 函数</li><li>执行 render 函数生成 vdom</li></ul><h2 id="_5、渲染过程" tabindex="-1"><a class="header-anchor" href="#_5、渲染过程" aria-hidden="true">#</a> 5、渲染过程</h2><ul><li>初次渲染过程</li><li>更新过程</li><li>异步渲染</li></ul><h2 id="_6、前端路由" tabindex="-1"><a class="header-anchor" href="#_6、前端路由" aria-hidden="true">#</a> 6、前端路由</h2><ul><li>hash</li><li>h5 history</li><li>两者对比</li></ul><h2 id="_7、vue-面试真题演练" tabindex="-1"><a class="header-anchor" href="#_7、vue-面试真题演练" aria-hidden="true">#</a> 7、vue 面试真题演练</h2><h3 id="_1、v-show-和-v-if-的区别" tabindex="-1"><a class="header-anchor" href="#_1、v-show-和-v-if-的区别" aria-hidden="true">#</a> 1、v-show 和 v-if 的区别</h3><ul><li>v-show 通过 css display 控制显示和隐藏</li><li>v-if 组件真正的渲染和销毁， 而不是显示和隐藏</li><li>频繁切换显示状态用 v-show， 否则用 v-if</li></ul><h3 id="为何在-v-for-中使用-key" tabindex="-1"><a class="header-anchor" href="#为何在-v-for-中使用-key" aria-hidden="true">#</a> 为何在 v-for 中使用 key</h3><ul><li>必须用 key， 且不能是 index 和 random</li><li>diff 算法中通过 tag 和 key 来判断， 是否是 sameNode</li><li>减少渲染次数，提升渲染性能</li></ul><h3 id="描述-vue-组件生命周期-父子组件" tabindex="-1"><a class="header-anchor" href="#描述-vue-组件生命周期-父子组件" aria-hidden="true">#</a> 描述 Vue 组件生命周期（父子组件）</h3><ul><li>单组件生命周期</li><li>父子组件生命周期关系</li></ul><h3 id="vue-组件如何通讯-常见" tabindex="-1"><a class="header-anchor" href="#vue-组件如何通讯-常见" aria-hidden="true">#</a> Vue 组件如何通讯（常见）</h3><ul><li>父子组件 props 和 this.$emit</li><li>自定义事件 event.$no event.$off event.emit</li><li>vuex</li></ul><h3 id="描述组件渲染和更新的过程" tabindex="-1"><a class="header-anchor" href="#描述组件渲染和更新的过程" aria-hidden="true">#</a> 描述组件渲染和更新的过程</h3><ul><li>响应式（监听属性变化）</li><li>模版渲染</li><li>vdom</li></ul><h3 id="双向数据绑定-v-model-的实现原理" tabindex="-1"><a class="header-anchor" href="#双向数据绑定-v-model-的实现原理" aria-hidden="true">#</a> 双向数据绑定 v-model 的实现原理</h3><ul><li>input 元素的 value = this.name</li><li>绑定 input 事件 this.name = $event.target.value</li><li>data 更新触发 re-render</li></ul><h3 id="对于-mvvm-的理解" tabindex="-1"><a class="header-anchor" href="#对于-mvvm-的理解" aria-hidden="true">#</a> 对于 MVVM 的理解</h3><ul><li>Model、viewModel、view</li></ul><h3 id="computed-有何特点" tabindex="-1"><a class="header-anchor" href="#computed-有何特点" aria-hidden="true">#</a> computed 有何特点</h3><ul><li>缓存，不变不会重新计算</li><li>提高性能</li></ul><h3 id="为何组件-data-必须是一个函数" tabindex="-1"><a class="header-anchor" href="#为何组件-data-必须是一个函数" aria-hidden="true">#</a> 为何组件 data 必须是一个函数？</h3><ul><li>data 必须是一个函数（为了不同的实例不冲突）</li><li>vue 是一个 class</li></ul><h3 id="ajax-请求应该放在哪个生命周期" tabindex="-1"><a class="header-anchor" href="#ajax-请求应该放在哪个生命周期" aria-hidden="true">#</a> ajax 请求应该放在哪个生命周期</h3><ul><li>mounted</li><li>js 是单线程的， ajax 异步获取数据</li><li>放在 mounted 之前没有什么用，只会让逻辑变得更混乱</li></ul><h3 id="如何将组件所有-props-传递给子组件" tabindex="-1"><a class="header-anchor" href="#如何将组件所有-props-传递给子组件" aria-hidden="true">#</a> 如何将组件所有 props 传递给子组件？</h3><ul><li>$props</li><li><code>&lt;User v-bind=&quot;$props&quot;&gt;</code></li><li>细节知识点，优先级不高</li></ul><h3 id="如何自己实现-v-model" tabindex="-1"><a class="header-anchor" href="#如何自己实现-v-model" aria-hidden="true">#</a> 如何自己实现 v-model</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n  <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(<span class="token punctuation">&#39;</span>change<span class="token punctuation">&#39;</span>, $event.target.value)<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="多个组件有相同的逻辑-如何抽离" tabindex="-1"><a class="header-anchor" href="#多个组件有相同的逻辑-如何抽离" aria-hidden="true">#</a> 多个组件有相同的逻辑，如何抽离？</h3><ul><li>mixin</li><li>以及 mixin 的一些缺点</li></ul><h3 id="为何要使用异步组件" tabindex="-1"><a class="header-anchor" href="#为何要使用异步组件" aria-hidden="true">#</a> 为何要使用异步组件？</h3><ul><li>加载大组件</li><li>路由异步加载</li></ul><h3 id="何时使用-keep-alive" tabindex="-1"><a class="header-anchor" href="#何时使用-keep-alive" aria-hidden="true">#</a> 何时使用 keep-alive？</h3><ul><li>缓存组件，不需要重复渲染</li><li>如多个静态 tab 页的切换</li><li>优化性能</li></ul><h3 id="何时需要使用-beforedestory" tabindex="-1"><a class="header-anchor" href="#何时需要使用-beforedestory" aria-hidden="true">#</a> 何时需要使用 beforeDestory</h3><ul><li>解绑自定义事件 event.$off</li><li>清除定时器</li><li>解绑自定义的 DOM 事件，如 window scroll 等</li></ul><h3 id="什么是作用域插槽" tabindex="-1"><a class="header-anchor" href="#什么是作用域插槽" aria-hidden="true">#</a> 什么是作用域插槽</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:website</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>website<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="vuex-中-action-和-mutation-有何区别" tabindex="-1"><a class="header-anchor" href="#vuex-中-action-和-mutation-有何区别" aria-hidden="true">#</a> vuex 中 action 和 mutation 有何区别</h3><ul><li>action 中处理异步，mutation 不可以</li><li>mutaion 做原子操作</li><li>action 可以整合多个 mutation</li></ul><h3 id="vue-router-常用的路由模式" tabindex="-1"><a class="header-anchor" href="#vue-router-常用的路由模式" aria-hidden="true">#</a> vue-router 常用的路由模式</h3><ul><li>hash 默认</li><li>H5 history（需要服务支持）</li><li>两者比较</li></ul><h3 id="如何配置-vue-router-异步加载" tabindex="-1"><a class="header-anchor" href="#如何配置-vue-router-异步加载" aria-hidden="true">#</a> 如何配置 vue-router 异步加载</h3><ul><li>path 和 component</li><li>component: ()=&gt; import(&#39;..///&#39;)</li></ul><h3 id="请用-vnode-描述一个-dom-结构" tabindex="-1"><a class="header-anchor" href="#请用-vnode-描述一个-dom-结构" aria-hidden="true">#</a> 请用 vnode 描述一个 DOM 结构</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>vdom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 20px</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;div1&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;vdom&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token string">&#39;font-size: 20px&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="监听-data-变化的核心-api-是什么" tabindex="-1"><a class="header-anchor" href="#监听-data-变化的核心-api-是什么" aria-hidden="true">#</a> 监听 data 变化的核心 API 是什么</h3><ul><li>Object.defineProperty</li><li>以及深度监听、监听数组</li><li>有何缺点</li></ul><h3 id="vue-如何监听数组变化" tabindex="-1"><a class="header-anchor" href="#vue-如何监听数组变化" aria-hidden="true">#</a> Vue 如何监听数组变化</h3><ul><li>Object.defineProperty 不能监听数组变化</li><li>重新定义原型，重写 push pop 等方法，实现监听</li><li>proxy 可以原生支持监听数组变化</li></ul><h3 id="请描述响应式原理" tabindex="-1"><a class="header-anchor" href="#请描述响应式原理" aria-hidden="true">#</a> 请描述响应式原理</h3><ul><li>监听 data 变化</li><li>组件渲染和更新的流程</li></ul><h3 id="diff-算法的时间复杂度" tabindex="-1"><a class="header-anchor" href="#diff-算法的时间复杂度" aria-hidden="true">#</a> diff 算法的时间复杂度</h3><ul><li>O(n)</li><li>在 O(n^3)基础上做了一些调整</li></ul><h3 id="简述-diff-算法过程" tabindex="-1"><a class="header-anchor" href="#简述-diff-算法过程" aria-hidden="true">#</a> 简述 diff 算法过程</h3><ul><li>patch(elem, vnode)和 path(vnode, newVode)</li><li>pathVnode 和 addVnodes 和 removeVnodes</li><li>updataChildren（key 的重要性）</li></ul><h3 id="vue-为何是异步渲染-nexttick-何用" tabindex="-1"><a class="header-anchor" href="#vue-为何是异步渲染-nexttick-何用" aria-hidden="true">#</a> vue 为何是异步渲染， $nextTick 何用</h3><ul><li>异步渲染（以合并 data 修改），以提高渲染性能</li><li>$nextTick 在 DOM 更新完后，触发回调</li></ul><h3 id="vue-常见性能优化方式" tabindex="-1"><a class="header-anchor" href="#vue-常见性能优化方式" aria-hidden="true">#</a> Vue 常见性能优化方式</h3><ul><li>合理使用 v-show 和 v-if</li><li>合理使用 computed</li><li>v-for 时加 key， 以及避免和 v-if 同时使用</li><li>（v-for 优先级高， 每次 v-for 会重新计算一遍 v-if）</li><li>自定义事件、DOM 事件及时销毁</li><li>合理使用异步组件</li><li>合理使用 keep-alive</li><li>data 层级不要太深</li><li>使用 vue-loader 在开发环境做模版编译（预编译）</li><li>webpack 层面的优化</li><li>前端通用的性能优化，如图片懒加载</li><li>使用 SSR</li></ul>',71),l={},t=(0,e(3744).Z)(l,[["render",function(a,n){return s}]])},3744:(a,n)=>{n.Z=(a,n)=>{const e=a.__vccOpts||a;for(const[a,s]of n)e[a]=s;return e}}}]);