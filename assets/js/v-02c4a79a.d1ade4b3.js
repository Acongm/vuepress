"use strict";(self.webpackChunkmd_vuepress=self.webpackChunkmd_vuepress||[]).push([[6921],{3199:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-02c4a79a",path:"/interview/2025-04-28-analysis.html",title:"2025-04-28-面试题演练",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、笔试重点预测（需 60 分钟内完成）",slug:"一、笔试重点预测-需-60-分钟内完成",children:[{level:3,title:"1. 框架原理题（30 分）",slug:"_1-框架原理题-30-分",children:[]},{level:3,title:"2. 工程化实战题（25 分）",slug:"_2-工程化实战题-25-分",children:[]},{level:3,title:"3. 性能优化方案设计（25 分）",slug:"_3-性能优化方案设计-25-分",children:[]},{level:3,title:"4. 算法题（20 分）",slug:"_4-算法题-20-分",children:[]}]},{level:2,title:"二、技术面试高频考点（需重点准备）",slug:"二、技术面试高频考点-需重点准备",children:[{level:3,title:"1. 框架深度追问",slug:"_1-框架深度追问",children:[]},{level:3,title:"2. 工程化实践",slug:"_2-工程化实践",children:[]},{level:3,title:"3. 性能优化体系",slug:"_3-性能优化体系",children:[]},{level:3,title:"4. 架构设计能力",slug:"_4-架构设计能力",children:[]}]},{level:2,title:"三、行为面试应答策略（使用 STAR 法则）",slug:"三、行为面试应答策略-使用-star-法则",children:[{level:3,title:"1. 项目难点突破",slug:"_1-项目难点突破",children:[]},{level:3,title:"2. 团队协作案例",slug:"_2-团队协作案例",children:[]},{level:3,title:"3. 技术决策冲突",slug:"_3-技术决策冲突",children:[]}]},{level:2,title:"四、软实力展现技巧",slug:"四、软实力展现技巧",children:[]},{level:2,title:"五、模拟面试自测清单",slug:"五、模拟面试自测清单",children:[]}],git:{updatedTime:1747665176e3},filePathRelative:"interview/2025-04-28-analysis.md"}},5970:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="_2025-04-28-面试题演练" tabindex="-1"><a class="header-anchor" href="#_2025-04-28-面试题演练" aria-hidden="true">#</a> 2025-04-28-面试题演练</h1><h2 id="一、笔试重点预测-需-60-分钟内完成" tabindex="-1"><a class="header-anchor" href="#一、笔试重点预测-需-60-分钟内完成" aria-hidden="true">#</a> 一、笔试重点预测（需 60 分钟内完成）</h2><h3 id="_1-框架原理题-30-分" tabindex="-1"><a class="header-anchor" href="#_1-框架原理题-30-分" aria-hidden="true">#</a> 1. 框架原理题（30 分）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 实现要点​：\n * 使用 Proxy 拦截 get/set 操作，通过 WeakMap 实现依赖收集\n * 嵌套对象递归代理，解决深层响应问题\n * track 收集副作用函数，trigger 触发更新\n */</span>\n<span class="token comment">// Proxy深度代理 + 依赖自动回收 + 变更检测优化</span>\n\n<span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token comment">// 实现Vue3响应式核心逻辑（需手写代码）</span>\n<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 你的实现（需包含依赖收集和触发逻辑）</span>\n  <span class="token comment">// 提示：使用Proxy + WeakMap结构</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> oldVal <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token keyword">const</span> success <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> oldVal <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> success\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>\n  targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n  depsMap<span class="token operator">?.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 实现简易版Quasar的QBtn组件（需写出组件props定义和模板逻辑）</span>\n<span class="token keyword">const</span> QBtn <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;primary&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">loading</span><span class="token operator">:</span> Boolean\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 补充render函数（使用JSX语法）</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">q-btn q-btn-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>loading<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">?</span> <span class="token string">&#39;loading...&#39;</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_2-工程化实战题-25-分" tabindex="-1"><a class="header-anchor" href="#_2-工程化实战题-25-分" aria-hidden="true">#</a> 2. 工程化实战题（25 分）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Webpack配置题：为微前端架构优化构建配置</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 要求：实现代码分割、CSS作用域隔离、共享依赖处理</span>\n  <span class="token comment">// 提示：使用Module Federation + CSS Modules</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[contenthash].js&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 代码分割</span>\n    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">200000</span> <span class="token comment">// 200KB分割阈值</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 共享依赖处理 ??? 难</span>\n    <span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;userCenter&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;remoteEntry.js&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">exposes</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;./UserTable&#39;</span><span class="token operator">:</span> <span class="token string">&#39;./src/components/UserTable.vue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">vue</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">singleton</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">quasar</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">eager</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// CSS作用域隔离</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="_3-性能优化方案设计-25-分" tabindex="-1"><a class="header-anchor" href="#_3-性能优化方案设计-25-分" aria-hidden="true">#</a> 3. 性能优化方案设计（25 分）</h3><p>给定场景：用户中心存在万级数据表格，需同时满足：</p><ul><li>首屏加载&lt;1s</li><li>滚动流畅度&gt;60fps</li><li>内存占用&lt;50MB</li></ul><p>请列出至少 5 点优化方案，需包含：</p><ol><li>数据加载策略（如分页+虚拟滚动实现要点）</li><li>渲染优化手段（对比 React/Vue 不同框架的实现差异）</li><li>内存管理技巧（需给出具体代码示例） 答：</li></ol><ul><li>1、数据分片加载 <ul><li>分页 + 虚拟滚动</li><li>动态加载阈值</li></ul></li><li>渲染优化，使用 v-memo/ React.memo 优化组件渲染</li><li>按需释放内存 ？？？</li><li>数据压缩，接口/代码压缩</li><li>开启 GPU 加速</li></ul><h3 id="_4-算法题-20-分" tabindex="-1"><a class="header-anchor" href="#_4-算法题-20-分" aria-hidden="true">#</a> 4. 算法题（20 分）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 实现树形结构数据转换（需处理10万级数据）</span>\n<span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n  <span class="token comment">// ...更多数据</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">function</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 要求：时间复杂度O(n)，支持快速查找父节点</span>\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> roots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>parentId <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      roots<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> parent <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>parentId<span class="token punctuation">)</span>\n      parent<span class="token operator">?.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> roots\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><hr><h2 id="二、技术面试高频考点-需重点准备" tabindex="-1"><a class="header-anchor" href="#二、技术面试高频考点-需重点准备" aria-hidden="true">#</a> 二、技术面试高频考点（需重点准备）</h2><h3 id="_1-框架深度追问" tabindex="-1"><a class="header-anchor" href="#_1-框架深度追问" aria-hidden="true">#</a> 1. 框架深度追问</h3><ul><li>​Vue3 响应式原理 ​：重点准备 Proxy 实现细节，对比 Object.defineProperty 的优劣 <ul><li>Proxy 对比 Object.defineProperty 优势： <ul><li>支持动态属性增删</li><li>无需递归初始化嵌套对象</li><li>数组索引变化可直接监听</li></ul></li></ul></li><li>​Quasar 定制能力 ​：准备组件主题定制案例（参考你简历中的骨架屏实现） <ul><li>通过 quasar.conf.js 配置主题变量</li><li>动态切换主题示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuasar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;quasar&#39;</span>\n<span class="token keyword">const</span> $q <span class="token operator">=</span> <span class="token function">useQuasar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n$q<span class="token punctuation">.</span>dark<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 启用暗黑模式</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li>​ 微前端沙箱机制 ​：需能解释 JS/CSS 隔离方案，如 Proxy 隔离+CSS Scoped <ul><li>js 隔离： Proxy 代理全局对象实现隔离</li><li>css 隔离：使用虚拟 dom 或者 命名空间前缀</li></ul></li></ul><h3 id="_2-工程化实践" tabindex="-1"><a class="header-anchor" href="#_2-工程化实践" aria-hidden="true">#</a> 2. 工程化实践</h3><ul><li>​ 低代码平台设计 ​：重点说明 JSON Schema 驱动方案（参考简历中配置化表单） <ul><li>基于 Formily 二开的低代码平台，借助可视化设计器 生成 JSON Schema，基于 antd 组件乔接实现内部组件渲染，通过 低代码 的入口组件渲染 JSON Schema，并绑定 action 事件</li><li>通过深度使用 低代码 ，完成一些 表单、表格组件，并总结各种场景，完成提效</li></ul></li><li>​ 构建优化指标 ​：需量化说明 Tree Shaking 效果（如简历中 Rollup 打包&lt;15KB 案例） <ul><li>通过 webpack-bundle-analyzer 分析未使用代码（</li><li>使用体积更小的 preact 实现</li></ul></li><li>​CI/CD 全流程 ​：结合你分享的部署指南，说明如何保证构建质量 <ul><li>环境准备 -&gt; 代码检查/单测 -&gt; sonar 扫描 -&gt; 项目打包 -&gt; 更新日志/项目回退</li><li>在每次部署都进行一次代码扫描，并准确的标记好环境，保证每次 跑流水线都能 构建统一</li></ul></li></ul><h3 id="_3-性能优化体系" tabindex="-1"><a class="header-anchor" href="#_3-性能优化体系" aria-hidden="true">#</a> 3. 性能优化体系</h3><ul><li>​LCP 优化方案 ​：详细说明骨架屏+字体压缩+WebP 的综合方案（参考用户中心项目） <ul><li>网络加载优化：升级 tls 1.3,开启 gzip 加速，dns-prefetch 和 preconnect 提速</li><li>浏览器渲染优化：font-display:swap 加快渲染、非关键脚本异步渲染</li><li>代码体积优化：精简 code-js、按需引入 babel-polyfill、压缩代码、splitChunks</li><li>用户感知优化：使用骨架屏，接口提前请求，优先使用 webP 格式图片，</li></ul></li><li>​ 内存泄漏排查 ​：准备 Chrome Memory 面板使用案例（如金融项目错误率优化） <ul><li>Chrome Memory 面板快照对比，定位未释放的 DOM 节点 ？？？？</li></ul></li><li>​ 编译时优化 ​：解释 Babel 插件开发经验（可结合 core-js 优化案例展开） <ul><li>Babel 插件开发的核心在于精准操作 AST 与高效代码转换。结合 core-js 的优化案例，开发者可通过按需加载、动态替换和性能调优，显著提升代码兼容性与运行效率。实际开发中需注重工具链整合（如@babel/preset-env）和调试手段（如 AST 可视化），以平衡功能实现与性能开销</li></ul></li></ul><h3 id="_4-架构设计能力" tabindex="-1"><a class="header-anchor" href="#_4-架构设计能力" aria-hidden="true">#</a> 4. 架构设计能力</h3><ul><li>​ 插件系统设计 ​：重点说明 Rollup+Preact 的架构选型对比（跨平台公告系统案例） <ul><li>Tree Shaking 极致优化 ​ <ul><li>Rollup 通过静态分析实现更彻底的未使用代码剔除</li></ul></li><li>更小的运行时开销 ​ <ul><li>Rollup 生成代码无 Webpack 的模块加载器包装层</li></ul></li><li>​ES 模块原生支持 ​ <ul><li>公告系统要求兼容 CDN 直接加载，Rollup 对 ES 模块的天然支持（输出格式选择 esm）完美契合需求</li></ul></li><li>​ 插件系统简洁性 ​ <ul><li>公告系统仅需处理 JS/CSS 资源，Rollup 通过@rollup/plugin-node-resolve 等基础插件即可完成构建，相较 Webpack 减少 62%的配置文件代码量</li></ul></li><li>Preact 极简内核 ​、无痛兼容 React 生态 ​、信号机制高效更新 ​</li></ul></li><li>​ 状态管理方案 ​：对比 Vuex/Pinia 在大型项目中的实践差异 <ul><li>无</li></ul></li><li>​ 微前端通信 ​：准备主子应用通信方案（如公告系统的 Iframe/Web Component 实现） <ul><li>主应用通过 postMessage 传递全局状态</li><li>子应用通过 CustomEvent 触发事件</li></ul></li></ul><h2 id="三、行为面试应答策略-使用-star-法则" tabindex="-1"><a class="header-anchor" href="#三、行为面试应答策略-使用-star-法则" aria-hidden="true">#</a> 三、行为面试应答策略（使用 STAR 法则）</h2><h3 id="_1-项目难点突破" tabindex="-1"><a class="header-anchor" href="#_1-项目难点突破" aria-hidden="true">#</a> 1. 项目难点突破</h3><p>面试官可能问 ​：&quot;请描述你解决过最复杂的技术挑战&quot; 应答框架 ​：</p><ul><li>​​Situation​：用户中心日均 120W 请求下的性能瓶颈</li><li>​Task​：需在 2 周内将 LCP 从 2.3s 优化到&lt;1.5s</li><li>​Action​：采用四层优化体系（代码分割 → 资源预加载 → 渲染策略 → 兜底方案）</li><li>​Result​：登录转化率提升 18%+客诉下降 12%（准备优化前后监控截图）</li></ul><h3 id="_2-团队协作案例" tabindex="-1"><a class="header-anchor" href="#_2-团队协作案例" aria-hidden="true">#</a> 2. 团队协作案例</h3><p>​ 高频问题 ​：&quot;如何推动 Code Review 机制落地？&quot; ​ 应答要点 ​：</p><ul><li>​ 制定 ESLint 可量化规则（如圈复杂度&lt;15）</li><li>​ 建立评审 checklist（安全/性能/可维护性三个维度）</li><li>​ 结果可视化（BUG 率下降 25%的折线图）</li></ul><h3 id="_3-技术决策冲突" tabindex="-1"><a class="header-anchor" href="#_3-技术决策冲突" aria-hidden="true">#</a> 3. 技术决策冲突</h3><p>​ 压力问题 ​：&quot;如果团队成员反对你的架构方案怎么办？&quot; ​ 应答策略 ​：</p><ul><li>​ 用数据说话：展示微前端方案在 5 个系统的接入成本对比</li><li>​ 渐进式推进：先在公告系统试点，验证后再推广</li><li>​ 建立反馈机制：收集各系统接入后的效能变化数据</li></ul><h2 id="四、软实力展现技巧" tabindex="-1"><a class="header-anchor" href="#四、软实力展现技巧" aria-hidden="true">#</a> 四、软实力展现技巧</h2><ul><li>​ 用户体验敏感度 ​： <ul><li>准备「企业大学移动端」接口聚合案例（强调用户等待感知优化）</li><li>展示登录页面 FCP 优化前后的用户调研数据</li></ul></li><li>​ 技术前瞻性 ​： <ul><li>阐述对 Vue 3.4 新特性（defineModel、v-bind 同名缩写）的预研计划</li><li>讨论 WebAssembly 在前端性能敏感场景的应用可能</li></ul></li><li>​ 跨团队协作 ​： <ul><li>准备与后端团队制定 RESTful 规范的案例（如用户中心接口设计）</li><li>说明在 DevOps 平台建设中与测试团队的协作流程</li></ul></li></ul><h2 id="五、模拟面试自测清单" tabindex="-1"><a class="header-anchor" href="#五、模拟面试自测清单" aria-hidden="true">#</a> 五、模拟面试自测清单</h2><ul><li>能否在 5 分钟内讲清用户中心重构的技术方案？</li><li>是否能手写 Vue 响应式系统核心代码？</li><li>是否能用英文描述 Rollup 的 Tree Shaking 原理？</li><li>是否准备了三套不同时长的项目介绍（1/3/10 分钟版本）？</li><li>是否梳理过近两年主流前端框架的演进路线？</li></ul><p>建议重点强化 Vue3 响应式原理的手写实现（参考 MDN Proxy 文档），并准备三个不同颗粒度的项目介绍版本。面试前可针对岗位 JD 中的&quot;前端工程化优化&quot;要求，重点展示简历中低代码平台和 ESLint 规范建设的量化成果。</p>',40),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);