"use strict";(self.webpackChunkmd_vuepress=self.webpackChunkmd_vuepress||[]).push([[5415],{4190:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0b126c08",path:"/react/react18.html",title:"React 18 新特性",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"React 18 带来了什么",slug:"react-18-带来了什么",children:[]},{level:2,title:"Concurrent 的特点",slug:"concurrent-的特点",children:[]},{level:2,title:"入口模式",slug:"入口模式",children:[]},{level:2,title:"异步批处理",slug:"异步批处理",children:[{level:3,title:"批处理实现",slug:"批处理实现",children:[]},{level:3,title:"FlushSync 的实现",slug:"flushsync-的实现",children:[]}]},{level:2,title:"startTransition",slug:"starttransition",children:[{level:3,title:"概述",slug:"概述",children:[]},{level:3,title:"解决了什么问题",slug:"解决了什么问题",children:[]},{level:3,title:"浅析原理",slug:"浅析原理",children:[]},{level:3,title:"startTransition - 实践",slug:"starttransition-实践",children:[]},{level:3,title:"useTransition - 实践",slug:"usetransition-实践",children:[]},{level:3,title:"useDeferredValue - 实践",slug:"usedeferredvalue-实践",children:[]},{level:3,title:"useDeferredValue 与 useTransition 区别",slug:"usedeferredvalue-与-usetransition-区别",children:[]},{level:3,title:"与setTimeout、debounce异同",slug:"与settimeout、debounce异同",children:[]}]},{level:2,title:"Suspense - 实践",slug:"suspense-实践",children:[{level:3,title:"SuspenseList",slug:"suspenselist",children:[]}]},{level:2,title:"其他",slug:"其他",children:[]},{level:2,title:"问题",slug:"问题",children:[]},{level:2,title:"思考",slug:"思考",children:[]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],git:{updatedTime:1745609748e3},filePathRelative:"react/react18.md"}},2019:(n,s,a)=>{a.r(s),a.d(s,{default:()=>W});var p=a(6252);const t=(0,p.uE)('<h1 id="react-18-新特性" tabindex="-1"><a class="header-anchor" href="#react-18-新特性" aria-hidden="true">#</a> React 18 新特性</h1><h2 id="react-18-带来了什么" tabindex="-1"><a class="header-anchor" href="#react-18-带来了什么" aria-hidden="true">#</a> React 18 带来了什么</h2><p>react 18 的新 API 最大的特点 就是 <code>Concurrent rendering</code> 机制。</p><h2 id="concurrent-的特点" tabindex="-1"><a class="header-anchor" href="#concurrent-的特点" aria-hidden="true">#</a> Concurrent 的特点</h2><ul><li>startTransition: 可以让你的 UI 在一次花费高的状态转变中始终保持响应性</li><li>useDeferredValue: 可以让你延迟屏幕上不那么重要的部分的更新</li><li><code>&lt;SuspenseList&gt;</code>: 可以让你控制 loading 状态指示器（比如转圈圈）的出现顺序</li><li><s>Streaming SSR with selective hydration: 让你的 app 可以更快地加载并可以进行交互</s></li></ul><h2 id="入口模式" tabindex="-1"><a class="header-anchor" href="#入口模式" aria-hidden="true">#</a> 入口模式</h2><p>三种入口模式 legacy 模式： ReactDOM.render(<code>&lt;app /&gt;</code>, rootNode)。没有开启新功能，这是 react17 采用的默认模式。 (会有警告提示) <s>blocking 模式： ReactDOM.createBlockingRoot(rootNode).render(<code>&lt;app /&gt;</code>)。作为迁移到 concurrent 模式的过渡模式。</s> concurrent 模式： ReactDOM.createRoot(rootNode).render(<code>&lt;app /&gt;</code>)。这个模式开启了所有的新功能。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// React 17</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// React 18</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom/client&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="异步批处理" tabindex="-1"><a class="header-anchor" href="#异步批处理" aria-hidden="true">#</a> 异步批处理</h2><p>批处理是 react 将多个状态更新分组到一个渲染中以获得更好的性能。 react18 之前只能在 react 事件处理程序中批处理更新。 默认情况下，Promise、setTimeout、本机事件处理程序或任何其他事件内部的更新不会在 React 中批处理。 使用自动批处理，这些更新将自动批处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>flag<span class="token punctuation">,</span> setFlag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// React 18 and later versions does batch these.</span>\n    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>f<span class="token punctuation">)</span>\n    <span class="token comment">// React will rerender once at the end (that&#39;s batching!)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// react 17 render 执行次两次</span>\n<span class="token comment">// react 18 render 执行一次</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>那么，如果我不想要批处理呢？ 官方提供了一个 API <code>flushSync</code> 用于退出批处理</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> flushSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span> <span class="token comment">// Note: react-dom, not react</span>\n<span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// React has updated the DOM by now.</span>\n  <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>f<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// React has updated the DOM by now.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="批处理实现" tabindex="-1"><a class="header-anchor" href="#批处理实现" aria-hidden="true">#</a> 批处理实现</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> currentTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token operator">...</span>\n  <span class="token comment">// 确定下一条工作路线，以及它们的优先级。</span>\n  <span class="token keyword">var</span> nextLanes <span class="token operator">=</span> <span class="token function">getNextLanes</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root <span class="token operator">===</span> workInProgressRoot <span class="token operator">?</span> workInProgressRootRenderLanes <span class="token operator">:</span> NoLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 这将返回在&#39; getNextLanes &#39;调用期间计算的优先级级别。</span>\n  <span class="token keyword">var</span> newCallbackPriority <span class="token operator">=</span> <span class="token function">returnNextLanesPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 检查是否存在现有任务。我们也许可以重新利用它。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingCallbackNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> existingCallbackPriority <span class="token operator">=</span> root<span class="token punctuation">.</span>callbackPriority<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>existingCallbackPriority <span class="token operator">===</span> newCallbackPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 优先级没有改变。我们可以重用现有的任务。</span>\n       <span class="token keyword">return</span> <span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 优先级发生了变化。取消现有的回调。我们会安排一个新的</span>\n    <span class="token comment">// one below.</span>\n    <span class="token function">cancelCallback</span><span class="token punctuation">(</span>existingCallbackNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Schedule a new callback.</span>\n  <span class="token keyword">var</span> newCallbackNode<span class="token punctuation">;</span>\n  <span class="token operator">...</span><span class="token operator">...</span>\n  root<span class="token punctuation">.</span>callbackPriority <span class="token operator">=</span> newCallbackPriority<span class="token punctuation">;</span>\n  root<span class="token punctuation">.</span>callbackNode <span class="token operator">=</span> newCallbackNode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">// This is the entry point for every concurrent task, i.e. anything that</span>\n<span class="token comment">// goes through Scheduler.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>其实是将内部更新的优先级强制指定为 SyncLane，即指定为同步优先级，具体效果就是每一次更新时都会同步的执行渲染。</p><h3 id="flushsync-的实现" tabindex="-1"><a class="header-anchor" href="#flushsync-的实现" aria-hidden="true">#</a> FlushSync 的实现</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// DiscreteEventPriority === SyncLane</span>\n    <span class="token function">setCurrentUpdatePriority</span><span class="token punctuation">(</span>DiscreteEventPriority<span class="token punctuation">)</span>\n    fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token function">setCurrentUpdatePriority</span><span class="token punctuation">(</span>previousPriority<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',18),e={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1367",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("react 源码 - flushSync"),c=(0,p.uE)('<h2 id="starttransition" tabindex="-1"><a class="header-anchor" href="#starttransition" aria-hidden="true">#</a> startTransition</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>React 18 加入了一个全新的 API startTransition，这个 API 相当牛，可以让我们的页面在大屏更新里保持响应。这个 API 通过标记某些更新为&quot;transitions&quot;，来提高用户交互。可以说 React 可以让你在一次状态改变的过程中始终提供视觉上的回馈并且在这个过程中让浏览器能保持响应。</p><h3 id="解决了什么问题" tabindex="-1"><a class="header-anchor" href="#解决了什么问题" aria-hidden="true">#</a> 解决了什么问题</h3><p>使项目始终感觉流畅和响应的并不容易。 比如有时用户点击了一个按钮或者在输入框中输入，同时这些操作将会导致页面大量的更新，此时将会导致页面冻结或者挂起不动一会直到之前的更新任务完成为止。</p><p>在 React 18 之前，所有的更新没有优先级之分，都是紧急的，这意味着上面的两种状态更新会被同时 render，并且仍然会 block 住用户从他们的交互中获得反馈直到所有的东西都 render 好。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 紧急的更新：展示用户的输入</span>\n<span class="token function">setInputValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 将非紧急的更新标记为&quot;transitions&quot;</span>\n<span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setContent</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="浅析原理" tabindex="-1"><a class="header-anchor" href="#浅析原理" aria-hidden="true">#</a> 浅析原理</h3><h4 id="starttransition-伪代码" tabindex="-1"><a class="header-anchor" href="#starttransition-伪代码" aria-hidden="true">#</a> startTransition 伪代码</h4><p>在执行更新前将 ReactCurrentBatchConfig 里的 transition 属性赋值为 1，标记这次 Update 为&quot;transition&quot;，更新结束后再将 transition 属性赋为初始值 0</p>',10),l={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react/src/ReactStartTransition.js#L14",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("react 源码 - startTransition "),u=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ReactCurrentBatchConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span> number<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token function-variable function">scope</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> prevTransition <span class="token operator">=</span> ReactCurrentBatchConfig<span class="token punctuation">.</span>transition\n  ReactCurrentBatchConfig<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token function">scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// setContent(e.target.value);</span>\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    ReactCurrentBatchConfig<span class="token punctuation">.</span>transition <span class="token operator">=</span> prevTransition\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="dispatchsetstate-伪代码" tabindex="-1"><a class="header-anchor" href="#dispatchsetstate-伪代码" aria-hidden="true">#</a> dispatchSetState 伪代码</h4>',2),i=(0,p.Uk)("（更新的入口） 根据优先级进行更新 "),k={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react-reconciler/src/ReactFiberHooks.new.js#L2228",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("react 源码 - dispatchSetState"),d=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">dispatchSetState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  fiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span>\n  queue<span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  action<span class="token operator">:</span> <span class="token constant">A</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// 获取更新的优先级</span>\n  <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> update<span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    lane<span class="token punctuation">,</span>\n    action<span class="token punctuation">,</span>\n    hasEagerState<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    eagerState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    next<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">//  ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="reactfiberlane-伪代码" tabindex="-1"><a class="header-anchor" href="#reactfiberlane-伪代码" aria-hidden="true">#</a> ReactFiberLane 伪代码</h4><p>通过 31 位的二进制来定义 31 种优先级, 数值越小优先级越大</p>',3),m={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react-reconciler/src/ReactFiberLane.new.js#L34",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("react 源码 - ReactFiberLane "),h=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> TotalLanes <span class="token operator">=</span> <span class="token number">31</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> NoLanes<span class="token operator">:</span> Lanes <span class="token operator">=</span> <span class="token comment">/*                        */</span> <span class="token number">0b0000000000000000000000000000000</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> NoLane<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                          */</span> <span class="token number">0b0000000000000000000000000000000</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> SyncLane<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                        */</span> <span class="token number">0b0000000000000000000000000000001</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> InputContinuousHydrationLane<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*    */</span> <span class="token number">0b0000000000000000000000000000010</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> InputContinuousLane<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*             */</span> <span class="token number">0b0000000000000000000000000000100</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> DefaultHydrationLane<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*            */</span> <span class="token number">0b0000000000000000000000000001000</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> DefaultLane<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                     */</span> <span class="token number">0b0000000000000000000000000010000</span>\n\n<span class="token keyword">const</span> TransitionHydrationLane<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                */</span> <span class="token number">0b0000000000000000000000000100000</span>\n<span class="token keyword">const</span> TransitionLanes<span class="token operator">:</span> Lanes <span class="token operator">=</span> <span class="token comment">/*                       */</span> <span class="token number">0b0000000001111111111111111000000</span>\n<span class="token keyword">const</span> TransitionLane1<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                        */</span> <span class="token number">0b0000000000000000000000001000000</span>\n<span class="token keyword">const</span> TransitionLane2<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                        */</span> <span class="token number">0b0000000000000000000000010000000</span>\n<span class="token comment">// ....</span>\n<span class="token keyword">const</span> TransitionLane15<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                       */</span> <span class="token number">0b0000000000100000000000000000000</span>\n<span class="token keyword">const</span> TransitionLane16<span class="token operator">:</span> Lane <span class="token operator">=</span> <span class="token comment">/*                       */</span> <span class="token number">0b0000000001000000000000000000000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="requestupdatelane-伪代码" tabindex="-1"><a class="header-anchor" href="#requestupdatelane-伪代码" aria-hidden="true">#</a> requestUpdateLane 伪代码</h4><p>更新优先级 (是否有 <code>transition update</code>)</p>',3),f={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L452",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("react 源码 - requestUpdateLane"),v=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">fiber</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">{</span>\n  <span class="token comment">// Special cases</span>\n  <span class="token keyword">const</span> mode <span class="token operator">=</span> fiber<span class="token punctuation">.</span>mode\n  <span class="token comment">// Concurrent 时, 返回最高优先级 SyncLane</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> ConcurrentMode<span class="token punctuation">)</span> <span class="token operator">===</span> NoMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>SyncLane<span class="token operator">:</span> Lane<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> isTransition <span class="token operator">=</span> <span class="token function">requestCurrentTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> NoTransition\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isTransition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 确保相同的优先级在相同的事件的稳定</span>\n    <span class="token comment">// 在第一个事件进行缓存, 确定是事件就重置缓存</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentEventTransitionLane <span class="token operator">===</span> NoLane<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 同一个事件中的所有transition都被分配到相同的队列上。</span>\n      currentEventTransitionLane <span class="token operator">=</span> <span class="token function">claimNextTransitionLane</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> currentEventTransitionLane\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="requestcurrenttransition-伪代码" tabindex="-1"><a class="header-anchor" href="#requestcurrenttransition-伪代码" aria-hidden="true">#</a> requestCurrentTransition 伪代码</h4>',2),w=(0,p.Uk)("返回优先级 "),x={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react-reconciler/src/ReactFiberTransition.js",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("react 源码 - requestCurrentTransition "),T=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ReactCurrentBatchConfig <span class="token punctuation">}</span> <span class="token operator">=</span> ReactSharedInternals\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> NoTransition <span class="token operator">=</span> <span class="token keyword">null</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">requestCurrentTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Transition <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> ReactCurrentBatchConfig<span class="token punctuation">.</span>transition\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="claimnexttransitionlane-伪代码" tabindex="-1"><a class="header-anchor" href="#claimnexttransitionlane-伪代码" aria-hidden="true">#</a> claimNextTransitionLane 伪代码</h4><p>返回当前事件触发的标记为&quot;transition&quot;的 update 的优先级</p>',3),j={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react-reconciler/src/ReactFiberLane.new.js#L493",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("react 源码 - claimNextTransitionLane"),C=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">claimNextTransitionLane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">{</span>\n  <span class="token comment">// 在执行中, 将每个新的 transition 任务分配到下一个优先级</span>\n  <span class="token comment">// 大多数情况下, 每个过渡都有自己的优先级, 知道我们结束结束.</span>\n  <span class="token keyword">const</span> lane <span class="token operator">=</span> nextTransitionLane\n  nextTransitionLane <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextTransitionLane <span class="token operator">&amp;</span> TransitionLanes<span class="token punctuation">)</span> <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nextTransitionLane <span class="token operator">=</span> TransitionLane1\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> lane\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="geteventpriority-伪代码" tabindex="-1"><a class="header-anchor" href="#geteventpriority-伪代码" aria-hidden="true">#</a> getEventPriority 伪代码</h4><p>判定其他更新的优先级</p>',3),R={href:"https://github.com/facebook/react/blame/v18.2.0/packages/react-dom/src/events/ReactDOMEventListener.js#L410",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("react 源码 - getEventPriority"),D=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getEventPriority</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">domEventName</span><span class="token operator">:</span> DOMEventName</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">*</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>domEventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Used by SimpleEventPlugin:</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;cancel&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;click&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;close&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;contextmenu&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;copy&#39;</span><span class="token operator">:</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;input&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;select&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;selectstart&#39;</span><span class="token operator">:</span>\n      <span class="token comment">// DiscreteEventPriority === SyncLane</span>\n      <span class="token keyword">return</span> DiscreteEventPriority\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>总的来说就是在执行更新前将 ReactCurrentBatchConfig 里的 transition 属性赋值为 1，标记这次 Update 为&quot;transition&quot;，更新结束后再将 transition 属性赋为初始值 0</p><p>这里通过修改 <code>ReactCurrentBatchConfig.transition</code> 的值来做标记， 后面在 <code>setState</code> 中， 通过 <code>dispatchAction</code> 来判断代码执行顺序的优先级。</p><h3 id="starttransition-实践" tabindex="-1"><a class="header-anchor" href="#starttransition-实践" aria-hidden="true">#</a> startTransition - 实践</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> startTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>ctn<span class="token punctuation">,</span> updateCtn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> updateNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>input\n        value<span class="token operator">=</span><span class="token punctuation">{</span>ctn<span class="token punctuation">}</span>\n        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">updateCtn</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n          <span class="token comment">// 标记非紧急更新来处理，差不多后端并发一样变异步了，主线程不执行。但这里概念会变成等待更新</span>\n          <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token comment">// updateNum(num + 1)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>BusyChild num<span class="token operator">=</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 由于程序相对简单，需要做render的时间延迟，这样我们就更好的看到效果</span>\n\n<span class="token keyword">const</span> BusyChild <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> num <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span> number <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;BusyChild view&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> cur <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 增加render的耗时 时间越大，卡顿效果越明显</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cur <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',5),P={href:"https://codesandbox.io/s/react-18-demo-forked-780b73?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("输入渲染 30000 条数据 Demo"),N=(0,p.uE)('<h3 id="usetransition-实践" tabindex="-1"><a class="header-anchor" href="#usetransition-实践" aria-hidden="true">#</a> useTransition - 实践</h3><p>一般情况下，我们可能需要通知用户后台正在工作。为此提供了一个带有 <code>isPending</code> 转换标志的 <code>useTransition</code>，React 将在状态转换期间提供视觉反馈，并在转换发生时保持浏览器响应。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">return</span> isPending <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Spin <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="usedeferredvalue-实践" tabindex="-1"><a class="header-anchor" href="#usedeferredvalue-实践" aria-hidden="true">#</a> useDeferredValue - 实践</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useDeferredValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">const</span> deferredValue <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>用法如下：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useDeferredValue<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> MySlowList <span class="token keyword">from</span> <span class="token string">&#39;../components/MySlowList&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">UseDeferredValuePage</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> deferredText <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setText</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">UseDeferredValuePage</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token comment">/* 保持将当前文本传递给 input */</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token comment">/* 但在必要时可以将列表“延后” */</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>deferredText<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MySlowList</span></span> <span class="token attr-name">text</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>deferredText<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="usedeferredvalue-与-usetransition-区别" tabindex="-1"><a class="header-anchor" href="#usedeferredvalue-与-usetransition-区别" aria-hidden="true">#</a> useDeferredValue 与 useTransition 区别</h3><ul><li>相同：useDeferredValue 本质上和内部实现与 useTransition 一样都是标记成了非紧急更新任务。</li><li>不同：useTransition 是把更新任务变成了延迟更新任务，而 useDeferredValue 是产生一个新的值，这个值作为延时状态。</li></ul><h3 id="与settimeout、debounce异同" tabindex="-1"><a class="header-anchor" href="#与settimeout、debounce异同" aria-hidden="true">#</a> 与<code>setTimeout</code>、<code>debounce</code>异同</h3><p>在 startTransition 出现之前，我们可以使用 setTimeout 来实现优化。但是现在在处理上面的优化的时候，有了 startTransition 基本上可以抛弃 setTimeout 了，原因主要有以三点：</p><p>首先，与 setTimeout 不同的是，startTransition 并不会延迟调度，而是会立即执行，startTransition 接收的函数是同步执行的，只是这个 update 被加了一个“transitions&quot;的标记。而这个标记，React 内部处理更新的时候是会作为参考信息的。这就意味着，相比于 setTimeout， 把一个 update 交给 startTransition 能够更早地被处理。而在于较快的设备上，这个过度是用户感知不到的。</p><h2 id="suspense-实践" tabindex="-1"><a class="header-anchor" href="#suspense-实践" aria-hidden="true">#</a> Suspense - 实践</h2><p>更方便的组织并行请求和 loading 状态的代码</p><p>16 就已经支持, 例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// This component is loaded dynamically</span>\n<span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./OtherComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Spinner <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>OtherComponent <span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Suspense<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在 react18 中, 对其进行了一些丰富的处理, 我们可以 封装一层 <code>promise</code>，请求中，我们将 <code>promise</code> 作为异常抛出，请求完成展示结果。 例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">wrapPromise</span><span class="token punctuation">(</span><span class="token parameter">promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span>\n  <span class="token keyword">let</span> result\n  <span class="token keyword">let</span> suspender <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      status <span class="token operator">=</span> <span class="token string">&#39;success&#39;</span>\n      result <span class="token operator">=</span> r\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      status <span class="token operator">=</span> <span class="token string">&#39;error&#39;</span>\n      result <span class="token operator">=</span> e\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> suspender\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> result\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> result\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>此外, 还补充了 SuspenseList</p><h3 id="suspenselist" tabindex="-1"><a class="header-anchor" href="#suspenselist" aria-hidden="true">#</a> SuspenseList</h3><p><s><code> ts 下运行使用失败</code></s></p><p>用于控制 Suspense 组件的显示顺序。</p><h4 id="revealorder-suspense-加载顺序" tabindex="-1"><a class="header-anchor" href="#revealorder-suspense-加载顺序" aria-hidden="true">#</a> <code>revealOrder</code> Suspense 加载顺序</h4><ul><li><code>together</code> 所有 Suspense 一起显示，也就是最后一个加载完了才一起显示全部</li><li><code>forwards</code> 按照顺序显示 Suspense</li><li><code>backwards</code> 反序显示 Suspense</li></ul><h4 id="tail是否显示-fallback-只在-revealorder-为-forwards-或者-backwards-时候有效" tabindex="-1"><a class="header-anchor" href="#tail是否显示-fallback-只在-revealorder-为-forwards-或者-backwards-时候有效" aria-hidden="true">#</a> <code>tail</code>是否显示 fallback，只在 revealOrder 为 forwards 或者 backwards 时候有效</h4><ul><li><code>hidden</code>不显示</li><li><code>collapsed</code>轮到自己再显示 </li></ul><h4 id="suspenselist-示例" tabindex="-1"><a class="header-anchor" href="#suspenselist-示例" aria-hidden="true">#</a> SuspenseList 示例</h4><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> Suspense<span class="token punctuation">,</span> SuspenseList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">&#39;../components/User&#39;</span>\n<span class="token keyword">import</span> Num <span class="token keyword">from</span> <span class="token string">&#39;../components/Num&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../utils&#39;</span>\n<span class="token keyword">import</span> ErrorBoundaryPage <span class="token keyword">from</span> <span class="token string">&#39;./ErrorBoundaryPage&#39;</span>\n\n<span class="token keyword">const</span> initialResource <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SuspenseListPage</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>resource<span class="token punctuation">,</span> setResource<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialResource<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">SuspenseListPage</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SuspenseList</span></span> <span class="token attr-name">tail</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>collapsed<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorBoundaryPage</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">网络出错了</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading - user</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">User</span></span> <span class="token attr-name">resource</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ErrorBoundaryPage</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading-num</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Num</span></span> <span class="token attr-name">resource</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SuspenseList</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setResource</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">refresh</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ul><li><s>userId</s></li><li><s>useSyncExternalStore</s></li><li><s>useInsertionEffect</s></li></ul><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><ul><li>任务如何按时间片拆分、时间片间如何中断与恢复？</li><li>任务是怎样设定优先级的？</li><li>如何让高优先级任务后生成而先执行，低优先级任务如又何恢复？</li></ul><p><img src="https://pic3.zhimg.com/80/v2-1bd643bbc6d0e43f4dbee76ff7840e16_1440w.jpg" alt="sync VS Concurrent"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> startTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>ctn<span class="token punctuation">,</span> updateCtn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">upData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\n    <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>\n    <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;render&#39;</span><span class="token punctuation">,</span> ctn<span class="token punctuation">)</span>\n  <span class="token comment">// render ac</span>\n  <span class="token comment">// render abcd</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>upData<span class="token punctuation">}</span><span class="token operator">&gt;</span>upData<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>ctn<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><p>下面代码 <code>startTransition</code> 为什么不起作用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>ctn<span class="token punctuation">,</span> updateCtn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">upData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>\n      <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">updateCtn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;render&#39;</span><span class="token punctuation">,</span> ctn<span class="token punctuation">)</span>\n<span class="token comment">// abc</span>\n<span class="token comment">// abcde</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',38),U={href:"https://juejin.cn/post/7029120932086022174",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("React 18 新特性之 startTransition"),A={href:"https://zhuanlan.zhihu.com/p/60307571",target:"_blank",rel:"noopener noreferrer"},B=(0,p.Uk)("深入剖析 React Concurrent"),I={href:"https://juejin.cn/post/7117512204059934733",target:"_blank",rel:"noopener noreferrer"},M=(0,p.Uk)("react18 新特性及实践总结"),O={href:"https://codesandbox.io/s/koyz664q35",target:"_blank",rel:"noopener noreferrer"},V=(0,p.Uk)("Sync/setTimeout/debounce/throttle/Concurrent - 性能 Demo"),F={},W=(0,a(3744).Z)(F,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])]),c,(0,p._)("p",null,[(0,p._)("a",l,[r,(0,p.Wm)(a)])]),u,(0,p._)("p",null,[i,(0,p._)("a",k,[b,(0,p.Wm)(a)])]),d,(0,p._)("p",null,[(0,p._)("a",m,[g,(0,p.Wm)(a)])]),h,(0,p._)("p",null,[(0,p._)("a",f,[y,(0,p.Wm)(a)])]),v,(0,p._)("p",null,[w,(0,p._)("a",x,[L,(0,p.Wm)(a)])]),T,(0,p._)("p",null,[(0,p._)("a",j,[S,(0,p.Wm)(a)])]),C,(0,p._)("p",null,[(0,p._)("a",R,[_,(0,p.Wm)(a)])]),D,(0,p._)("p",null,[(0,p._)("a",P,[E,(0,p.Wm)(a)])]),N,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",U,[q,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",A,[B,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",I,[M,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",O,[V,(0,p.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);