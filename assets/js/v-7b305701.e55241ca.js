"use strict";(self.webpackChunkmd_vuepress=self.webpackChunkmd_vuepress||[]).push([[3772],{6209:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-7b305701",path:"/TypeScript/Study.html",title:"每天学一点 TS",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Parameters<T>获取构造函数的参数类型",slug:"parameters-t-获取构造函数的参数类型",children:[]},{level:2,title:"extends(条件类型)",slug:"extends-条件类型",children:[]},{level:2,title:"Partial <T>,让属性都变成可选的",slug:"partial-t-让属性都变成可选的",children:[]},{level:2,title:"Required<T>,让属性都变成必选",slug:"required-t-让属性都变成必选",children:[]},{level:2,title:"Pick<T,K>,只保留自己选择的属性,U 代表属性集合",slug:"pick-t-k-只保留自己选择的属性-u-代表属性集合",children:[]},{level:2,title:"Omit<T,K>实现排除已选的属性",slug:"omit-t-k-实现排除已选的属性",children:[]},{level:2,title:"Record<K,T>, 创建一个类型,T 代表键值的类型, U 代表值的类型",slug:"record-k-t-创建一个类型-t-代表键值的类型-u-代表值的类型",children:[]},{level:2,title:"Record<K,T>, 创建一个类型,T 代表键值的类型, U 代表值的类型",slug:"record-k-t-创建一个类型-t-代表键值的类型-u-代表值的类型-1",children:[]},{level:2,title:"Exclude<T,U>, 过滤 T 中和 U 相同(或兼容)的类型",slug:"exclude-t-u-过滤-t-中和-u-相同-或兼容-的类型",children:[]},{level:2,title:"Extract<T,U>, 提取 T 中和 U 相同(或兼容)的类型",slug:"extract-t-u-提取-t-中和-u-相同-或兼容-的类型",children:[]},{level:2,title:"NonNullable <T>, 剔除 T 中的 undefined 和 null",slug:"nonnullable-t-剔除-t-中的-undefined-和-null",children:[]},{level:2,title:"ReturnType<T>, 获取 T 的返回值的类型",slug:"returntype-t-获取-t-的返回值的类型",children:[]},{level:2,title:"InstanceType<T>, 返回 T 的实例类型 ????",slug:"instancetype-t-返回-t-的实例类型",children:[]},{level:2,title:"Parameters<T> 获取函数参数类型",slug:"parameters-t-获取函数参数类型",children:[]},{level:2,title:"ConstructorParameters <T> 获取构造函数的参数类型",slug:"constructorparameters-t-获取构造函数的参数类型",children:[]},{level:2,title:"extends(条件类型)",slug:"extends-条件类型-1",children:[]},{level:2,title:"infer(类型推断) ???",slug:"infer-类型推断",children:[]}],git:{updatedTime:1641571936e3},filePathRelative:"TypeScript/Study.md"}},1408:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="每天学一点-ts" tabindex="-1"><a class="header-anchor" href="#每天学一点-ts" aria-hidden="true">#</a> 每天学一点 TS</h1><h2 id="parameters-t-获取构造函数的参数类型" tabindex="-1"><a class="header-anchor" href="#parameters-t-获取构造函数的参数类型" aria-hidden="true">#</a> Parameters<code>&lt;T&gt;</code>获取构造函数的参数类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">AConstructor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span><span class="token punctuation">(</span>a<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>AConstructor<span class="token operator">&gt;</span> <span class="token comment">// [number]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="extends-条件类型" tabindex="-1"><a class="header-anchor" href="#extends-条件类型" aria-hidden="true">#</a> extends(条件类型)</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="partial-t-让属性都变成可选的" tabindex="-1"><a class="header-anchor" href="#partial-t-让属性都变成可选的" aria-hidden="true">#</a> Partial <code>&lt;T&gt;</code>,让属性都变成可选的</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string <span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token comment">// { a?: number; b?: string;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="required-t-让属性都变成必选" tabindex="-1"><a class="header-anchor" href="#required-t-让属性都变成必选" aria-hidden="true">#</a> Required<code>&lt;T&gt;</code>,让属性都变成必选</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token operator">:</span> string <span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token comment">// { a: number; b: string;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="pick-t-k-只保留自己选择的属性-u-代表属性集合" tabindex="-1"><a class="header-anchor" href="#pick-t-k-只保留自己选择的属性-u-代表属性集合" aria-hidden="true">#</a> Pick&lt;T,K&gt;,只保留自己选择的属性,U 代表属性集合</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string <span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// {a:number}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="omit-t-k-实现排除已选的属性" tabindex="-1"><a class="header-anchor" href="#omit-t-k-实现排除已选的属性" aria-hidden="true">#</a> Omit&lt;T,K&gt;实现排除已选的属性</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string <span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// {b:string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="record-k-t-创建一个类型-t-代表键值的类型-u-代表值的类型" tabindex="-1"><a class="header-anchor" href="#record-k-t-创建一个类型-t-代表键值的类型-u-代表值的类型" aria-hidden="true">#</a> Record&lt;K,T&gt;, 创建一个类型,T 代表键值的类型, U 代表值的类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A1</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token comment">// 等价{[k:string]:string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="record-k-t-创建一个类型-t-代表键值的类型-u-代表值的类型-1" tabindex="-1"><a class="header-anchor" href="#record-k-t-创建一个类型-t-代表键值的类型-u-代表值的类型-1" aria-hidden="true">#</a> Record&lt;K,T&gt;, 创建一个类型,T 代表键值的类型, U 代表值的类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A1</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token comment">// 等价{[k:string]:string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="exclude-t-u-过滤-t-中和-u-相同-或兼容-的类型" tabindex="-1"><a class="header-anchor" href="#exclude-t-u-过滤-t-中和-u-相同-或兼容-的类型" aria-hidden="true">#</a> Exclude&lt;T,U&gt;, 过滤 T 中和 U 相同(或兼容)的类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string <span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>number <span class="token operator">|</span> string<span class="token punctuation">,</span> string <span class="token operator">|</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// number</span>\n\n<span class="token comment">// 兼容</span>\n\ntype <span class="token constant">A2</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>number <span class="token operator">|</span> string<span class="token punctuation">,</span> any <span class="token operator">|</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// never , 因为any兼容number, 所以number被过滤掉</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="extract-t-u-提取-t-中和-u-相同-或兼容-的类型" tabindex="-1"><a class="header-anchor" href="#extract-t-u-提取-t-中和-u-相同-或兼容-的类型" aria-hidden="true">#</a> Extract&lt;T,U&gt;, 提取 T 中和 U 相同(或兼容)的类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string <span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span>number <span class="token operator">|</span> string<span class="token punctuation">,</span> string <span class="token operator">|</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="nonnullable-t-剔除-t-中的-undefined-和-null" tabindex="-1"><a class="header-anchor" href="#nonnullable-t-剔除-t-中的-undefined-和-null" aria-hidden="true">#</a> NonNullable <code>&lt;T&gt;</code>, 剔除 T 中的 undefined 和 null</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A1</span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>number <span class="token operator">|</span> string <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token comment">// number|string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="returntype-t-获取-t-的返回值的类型" tabindex="-1"><a class="header-anchor" href="#returntype-t-获取-t-的返回值的类型" aria-hidden="true">#</a> ReturnType<code>&lt;T&gt;</code>, 获取 T 的返回值的类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A1</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token operator">&gt;</span> <span class="token comment">// number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="instancetype-t-返回-t-的实例类型" tabindex="-1"><a class="header-anchor" href="#instancetype-t-返回-t-的实例类型" aria-hidden="true">#</a> InstanceType<code>&lt;T&gt;</code>, 返回 T 的实例类型 ????</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">a</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">AConstructor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">AClass</span><span class="token operator">:</span> AConstructor</span><span class="token punctuation">)</span><span class="token operator">:</span> InstanceType<span class="token operator">&lt;</span>AConstructor<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="parameters-t-获取函数参数类型" tabindex="-1"><a class="header-anchor" href="#parameters-t-获取函数参数类型" aria-hidden="true">#</a> Parameters<code>&lt;T&gt;</code> 获取函数参数类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>a<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token comment">// [number, string]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="constructorparameters-t-获取构造函数的参数类型" tabindex="-1"><a class="header-anchor" href="#constructorparameters-t-获取构造函数的参数类型" aria-hidden="true">#</a> ConstructorParameters <code>&lt;T&gt;</code> 获取构造函数的参数类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 和Parameters类似, 只是T这里是构造函数类型.</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">AConstructor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span><span class="token punctuation">(</span>a<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype <span class="token constant">A1</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>AConstructor<span class="token operator">&gt;</span> <span class="token comment">// [number]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="extends-条件类型-1" tabindex="-1"><a class="header-anchor" href="#extends-条件类型-1" aria-hidden="true">#</a> extends(条件类型)</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span>\n\ntype <span class="token constant">A</span> <span class="token operator">=</span> string <span class="token keyword">extends</span> <span class="token string">&#39;123&#39;</span> <span class="token operator">?</span> string <span class="token operator">:</span><span class="token string">&#39;123&#39;</span> <span class="token comment">// &#39;123&#39;</span>\n\ntype <span class="token constant">B</span> <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">?</span> string <span class="token operator">:</span><span class="token number">123</span> <span class="token comment">// string</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="infer-类型推断" tabindex="-1"><a class="header-anchor" href="#infer-类型推断" aria-hidden="true">#</a> infer(类型推断) ???</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">export</span> type Tail<span class="token operator">&lt;</span>Tuple <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> Tuple</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span>\n\n<span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> never<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',35),t={},p=(0,a(3744).Z)(t,[["render",function(s,n){return e}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);