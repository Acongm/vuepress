"use strict";(self.webpackChunkmd_vuepress=self.webpackChunkmd_vuepress||[]).push([[9374],{1661:(e,n,l)=>{l.r(n),l.d(n,{data:()=>t});const t={key:"v-314212cf",path:"/webpack/install/pnpm.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"node_modules 问题",slug:"node-modules-问题",children:[]},{level:2,title:"修复 node_modules",slug:"修复-node-modules",children:[]},{level:2,title:"初始化即插即用",slug:"初始化即插即用",children:[]},{level:2,title:"即插即用loose模式",slug:"即插即用loose模式",children:[{level:3,title:"警告",slug:"警告",children:[]}]},{level:2,title:"备择方案",slug:"备择方案",children:[{level:3,title:"兼容性表",slug:"兼容性表",children:[]}]},{level:2,title:"经常问的问题",slug:"经常问的问题",children:[{level:3,title:"为什么不使用导入地图？",slug:"为什么不使用导入地图",children:[]},{level:3,title:"包存储在 Zip 档案中：我如何访问他们的文件？",slug:"包存储在-zip-档案中-我如何访问他们的文件",children:[]},{level:3,title:"后备模式",slug:"后备模式",children:[]}]},{level:2,title:"前言",slug:"前言",children:[{level:3,title:"问题",slug:"问题",children:[]}]},{level:2,title:"结构",slug:"结构",children:[]},{level:2,title:"npm",slug:"npm",children:[]},{level:2,title:"yarn",slug:"yarn",children:[]},{level:2,title:"pnpm",slug:"pnpm",children:[]},{level:2,title:"ni",slug:"ni",children:[]}],git:{updatedTime:1747665176e3},filePathRelative:"webpack/install/pnpm.md"}},54:(e,n,l)=>{l.r(n),l.d(n,{default:()=>ut});var t=l(6252);const a=(0,t._)("h2",{id:"node-modules-问题",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#node-modules-问题","aria-hidden":"true"},"#"),(0,t.Uk)(" node_modules 问题")],-1),s=(0,t.Uk)("过去的安装方式很简单：运行"),r=(0,t._)("code",null,"yarn install",-1),o=(0,t.Uk)("Yarn 时会生成一个"),i=(0,t._)("code",null,"node_modules",-1),d=(0,t.Uk)("目录，然后 Node 可以使用其内置的"),p={href:"https://nodejs.org/api/modules.html#modules_all_together",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("Node Resolution Algorithm"),u=(0,t.Uk)("来使用该目录。在这种情况下，Node 不必首先知道“包”是什么：它只根据文件进行推理。“这个文件在这里存在吗？不：好的，让我们看看父文件"),_=(0,t._)("code",null,"node_modules",-1),g=(0,t.Uk)("。它在这里存在吗？仍然不存在：好的……”，它继续运行，直到找到正确的文件。由于以下几个原因，这个过程非常低效："),h=(0,t.uE)("<li>这些<code>node_modules</code>目录通常包含大量文件。生成它们可以弥补运行所需时间的 70% 以上<code>yarn install</code>。即使有预先存在的安装也不会拯救你，因为包管理器仍然必须区分<code>node_modules</code>它<em>应该</em>包含的内容。</li><li>因为<code>node_modules</code>生成是一个 I/O 繁重的操作，包管理器除了做一个简单的文件复制之外没有太多的余地来优化它——即使它可以在可能的情况下使用硬链接或写时复制，它也会在进行一堆系统调用来操作磁盘之前，仍然需要区分文件系统的当前状态。</li><li>因为 Node 没有包的概念，它也不知道文件是否<em>应该</em>被访问。完全有可能您编写的代码有一天在开发中有效，但后来在生产中中断，因为您忘记在<code>package.json</code>.</li><li>即使在运行时，Node 解析也必须进行大量调用<code>stat</code>，<code>readdir</code>以确定从何处加载每个所需文件。这是非常浪费的，也是启动 Node 应用程序花费如此多时间的部分原因。</li>",4),k=(0,t.Uk)("最后，"),m=(0,t._)("code",null,"node_modules",-1),b=(0,t.Uk)("文件夹的设计是不切实际的，因为它不允许包管理器正确地对包进行重复数据删除。尽管可以使用一些算法来优化树布局（"),f={href:"https://yarnpkg.com/advanced/lexicon#hoisting",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Uk)("提升"),x=(0,t.Uk)("），但我们仍然无法优化某些特定模式——不仅导致磁盘使用率高于所需，而且一些包在内存中被多次实例化."),U=(0,t._)("h2",{id:"修复-node-modules",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#修复-node-modules","aria-hidden":"true"},"#"),(0,t.Uk)(" 修复 node_modules")],-1),v=(0,t._)("p",null,"Yarn 已经知道关于你的依赖树的所有信息——它甚至会为你将它安装在磁盘上。那么，为什么要由 Node 来查找你的包在哪里呢？相反，包管理器的工作应该是通知解释器包在磁盘上的位置，并管理包之间的任何依赖关系，甚至包的版本。这就是创建即插即用的原因。",-1),W=(0,t._)("p",null,[(0,t.Uk)("在这种安装模式下（默认从 Yarn 2.0 开始），Yarn 生成单个文件而不是包含各种包副本"),(0,t._)("code",null,".pnp.cjs"),(0,t.Uk)("的通常文件夹。"),(0,t._)("code",null,"node_modules"),(0,t.Uk)("该"),(0,t._)("code",null,".pnp.cjs"),(0,t.Uk)("文件包含各种映射：一个将包名称和版本链接到它们在磁盘上的位置，另一个将包名称和版本链接到它们的依赖项列表。有了这些查找表，Yarn 可以立即告诉 Node 在哪里可以找到它需要访问的任何包，只要它们是依赖关系树的一部分，并且只要这个文件被加载到您的环境中（下一节将详细介绍） ）。")],-1),j=(0,t._)("p",null,"这种方法有多种好处：",-1),P=(0,t._)("li",null,"安装现在几乎是即时的。Yarn 只需要生成一个文本文件（而不是可能的数万个）。主要瓶颈是项目中依赖项的数量而不是磁盘性能。",-1),q=(0,t._)("li",null,[(0,t.Uk)("由于减少了 I/O 操作，安装更加稳定和可靠。尤其是在 Windows 上（批量写入和删除文件可能会触发与 Windows Defender 和类似工具的各种意外交互），I/O 繁重的"),(0,t._)("code",null,"node_modules"),(0,t.Uk)("操作更容易失败。")],-1),w=(0,t._)("li",null,"完美优化依赖树（又名完美提升）和可预测的包实例化。",-1),N=(0,t.Uk)("生成的"),S=(0,t._)("code",null,".pnp.cjs",-1),E=(0,t.Uk)("文件可以作为"),C={href:"https://yarnpkg.com/features/zero-installs",target:"_blank",rel:"noopener noreferrer"},I=(0,t.Uk)("零安装"),Y=(0,t.Uk)("工作的一部分提交到您的存储库，从而无需首先运行"),O=(0,t._)("code",null,"yarn install",-1),L=(0,t.Uk)("。"),M=(0,t._)("li",null,"更快的应用程序启动！节点解析不必像以前那样迭代文件系统层次结构（很快就不必这样做了！）。",-1),D=(0,t.uE)('<h2 id="初始化即插即用" tabindex="-1"><a class="header-anchor" href="#初始化即插即用" aria-hidden="true">#</a> 初始化即插即用</h2><p>Yarn 会生成一个<code>.pnp.cjs</code>需要安装的文件，以便 Node 知道在哪里可以找到相关的包。这种注册通常是透明的：<code>node</code>通过您的条目之一执行的任何直接或间接命令<code>scripts</code>都会自动将该<code>.pnp.cjs</code>文件注册为运行时依赖项。对于绝大多数用例，以下内容将按照您的预期工作：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./server.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>对于一些剩余的边缘情况，可能需要一个小的设置：</p>',4),z=(0,t.Uk)("如果您需要运行任意 Node 脚本，请使用"),F={href:"https://yarnpkg.com/cli/node",target:"_blank",rel:"noopener noreferrer"},Z=(0,t._)("code",null,"yarn node",-1),V=(0,t.Uk)("解释器，而不是"),A=(0,t._)("code",null,"node",-1),T=(0,t.Uk)(". 这足以将"),K=(0,t._)("code",null,".pnp.cjs",-1),B=(0,t.Uk)("文件注册为运行时依赖项。"),G=(0,t.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>yarn node ./server.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>如果您在自动执行 Node 脚本的系统上操作（例如在 Google Cloud Platform 上（--此处需要参考--）），只需在 init 脚本顶部需要 PnP 文件并调用其<code>setup</code>函数即可。</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>require(&#39;./.pnp.cjs&#39;).setup();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),J=(0,t.Uk)("作为一个快速提示，"),R=(0,t._)("code",null,"yarn node",-1),H=(0,t.Uk)("通常所做的只是将"),$=(0,t._)("code",null,"NODE_OPTIONS",-1),Q=(0,t.Uk)("环境变量设置为使用"),X={href:"https://nodejs.org/api/cli.html#cli_r_require_module",target:"_blank",rel:"noopener noreferrer"},ee=(0,t._)("code",null,"--require",-1),ne=(0,t.Uk)("来自 Node 的选项，与"),le=(0,t._)("code",null,".pnp.cjs",-1),te=(0,t.Uk)("文件的路径相关联。如果您愿意，您可以自己轻松地应用此操作："),ae=(0,t.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node -r ./.pnp.cjs ./server.js\nNODE_OPTIONS=&quot;--require $(pwd)/.pnp.cjs&quot; node ./server.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="即插即用loose模式" tabindex="-1"><a class="header-anchor" href="#即插即用loose模式" aria-hidden="true">#</a> 即插即用<code>loose</code>模式</h2><p>由于提升启发式不是标准化和可预测的，因此在严格模式下运行的 PnP 将阻止包需要未明确列出的依赖项；即使其他依赖项也依赖它。这可能会导致某些软件包出现问题。</p><p>为了解决这个问题，Yarn 提供了一种“松散”模式，这将导致 PnP 链接器与提升器协同工作<code>node-modules</code>- 我们将首先生成在典型安装中将被提升到顶层的软件包列表<code>node_modules</code>，然后记住这个列表，我们称之为“后备池”。</p>',4),se=(0,t.Uk)("请注意，因为松散模式直接调用提升器，它遵循与"),re={href:"https://github.com/yarnpkg/berry/tree/master/packages/plugin-nm",target:"_blank",rel:"noopener noreferrer"},oe=(0,t.Uk)("链接器"),ie=(0,t._)("code",null,"node-modules",-1),de=(0,t.Uk)("使用的真正算法完全相同的实现！"),pe={href:"https://github.com/yarnpkg/berry/tree/master/packages/plugin-nm",target:"_blank",rel:"noopener noreferrer"},ce=(0,t._)("code",null,"node-modules",-1),ue=(0,t.Uk)("在运行时，如果依赖项的任何版本最终在回退池中，仍然允许需要未列出的依赖项的包访问它们（可以使用"),_e={href:"https://yarnpkg.com/configuration/yarnrc#pnpFallbackMode",target:"_blank",rel:"noopener noreferrer"},ge=(0,t.Uk)("pnpFallbackMode"),he=(0,t.Uk)("调整哪些包完全被允许依赖回退池）。"),ke=(0,t.Uk)("请注意，备用池的内容是不确定的。如果依赖关系树包含同一个包的多个版本，则无法确定将哪个版本提升到顶层。因此，访问回退池的包仍然会生成警告（通过"),me={href:"https://nodejs.org/api/process.html#process_process_emitwarning_warning_type_code_ctor",target:"_blank",rel:"noopener noreferrer"},be=(0,t.Uk)("process.emitWarning"),fe=(0,t.Uk)(" API）。"),ye=(0,t._)("p",null,[(0,t.Uk)("此模式提供了"),(0,t._)("code",null,"strict"),(0,t.Uk)("PnP 链接器和"),(0,t._)("code",null,"node_modules"),(0,t.Uk)("链接器之间的折衷方案。")],-1),xe=(0,t.Uk)("为了启用"),Ue=(0,t._)("code",null,"loose",-1),ve=(0,t.Uk)("模式，请确保该"),We={href:"https://yarnpkg.com/configuration/yarnrc#nodeLinker",target:"_blank",rel:"noopener noreferrer"},je=(0,t._)("code",null,"nodeLinker",-1),Pe=(0,t.Uk)("选项设置为"),qe=(0,t._)("code",null,"pnp",-1),we=(0,t.Uk)("（默认）并将以下内容添加到您的本地"),Ne={href:"https://yarnpkg.com/configuration/yarnrc",target:"_blank",rel:"noopener noreferrer"},Se=(0,t._)("code",null,".yarnrc.yml",-1),Ee=(0,t.Uk)("文件中："),Ce=(0,t.uE)('<div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">pnpMode</span><span class="token punctuation">:</span> loose\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Ie={href:"https://yarnpkg.com/configuration/yarnrc#pnpMode",target:"_blank",rel:"noopener noreferrer"},Ye=(0,t.Uk)("有关该"),Oe=(0,t._)("code",null,"pnpMode",-1),Le=(0,t.Uk)("选项的更多信息。"),Me=(0,t.uE)('<h3 id="警告" tabindex="-1"><a class="header-anchor" href="#警告" aria-hidden="true">#</a> 警告</h3><p>因为我们在解决错误时<em>发出</em>警告（而不是<em>抛出</em>错误），所以应用程序无法<em>捕获</em>它们。这意味着<code>require</code>如果缺少依赖项，尝试在 try/catch 块内尝试可选对等依赖项的常见模式将在运行时打印警告，即使它不应该。唯一的运行时含义是这样的警告可能会导致混淆，但可以放心地忽略它。</p><p>因此，从 2.1 版开始，即插即用<code>loose</code>模式<strong>将不再是</strong>默认模式（正如我们最初计划的那样）。它将继续作为替代方案得到支持，希望能够轻松过渡到默认和推荐的工作流程：即插即用<code>strict</code>模式。</p><h2 id="备择方案" tabindex="-1"><a class="header-anchor" href="#备择方案" aria-hidden="true">#</a> 备择方案</h2><p>在 Plug&#39;n&#39;Play 被批准为主要安装策略之前的几年里，其他项目提出了节点解析算法的替代实现——通常是为了规避<code>require.resolve</code>API 的缺点。示例包括 Webpack ( <code>enhanced-resolve</code>)、Babel ( <code>resolve</code>)、Jest ( <code>jest-resolve</code>) 和 Metro ( <code>metro-resolver</code>)。这些替代方案应被视为与 Plug&#39;n&#39;Play 的适当集成所取代。</p><h3 id="兼容性表" tabindex="-1"><a class="header-anchor" href="#兼容性表" aria-hidden="true">#</a> 兼容性表</h3><p>下面的兼容性表让您了解与社区中各种工具的集成状态。请注意，此处仅列出了 CLI 工具，因为前端库（例如<code>react</code>, <code>vue</code>, <code>lodash</code>, ...）不会重新实现节点解析，因此不需要任何特殊逻辑来利用 Plug&#39;n&#39;Play：</p>',7),De={href:"https://github.com/yarnpkg/berry/edit/master/packages/gatsby/content/features/plugnplay.md",target:"_blank",rel:"noopener noreferrer"},ze=(0,t.Uk)("建议在此表中添加"),Fe=(0,t._)("h4",{id:"原生支持",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#原生支持","aria-hidden":"true"},"#"),(0,t.Uk)(" 原生支持")],-1),Ze=(0,t._)("p",null,"许多常见的前端工具现在原生支持即插即用！",-1),Ve=(0,t._)("thead",null,[(0,t._)("tr",null,[(0,t._)("th",{style:{"text-align":"left"}},"项目名"),(0,t._)("th",{style:{"text-align":"left"}},"笔记")])],-1),Ae=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"角"),(0,t._)("td",{style:{"text-align":"left"}},"从 13+ 开始")],-1),Te=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"通天塔"),(0,t._)("td",{style:{"text-align":"left"}},[(0,t.Uk)("从"),(0,t._)("code",null,"resolve"),(0,t.Uk)("1.9 开始")])],-1),Ke=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"创建反应应用程序"),(0,t._)("td",{style:{"text-align":"left"}},"从 2.0+ 开始")],-1),Be=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"剑龙"),(0,t._)("td",{style:{"text-align":"left"}},"从 2.0.0-beta.14 开始")],-1),Ge=(0,t._)("td",{style:{"text-align":"left"}},"ESLint",-1),Je={style:{"text-align":"left"}},Re=(0,t.Uk)("共享配置的一些兼容性问题（可使用"),He={href:"https://yarnpkg.com/package/@rushstack/eslint-patch",target:"_blank",rel:"noopener noreferrer"},$e=(0,t.Uk)("@rushstack/eslint-patch 修复"),Qe=(0,t.Uk)("）"),Xe=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"盖茨比"),(0,t._)("td",{style:{"text-align":"left"}},"支持版本 ≥2.15.0、≥3.7.0")],-1),en=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"吞咽"),(0,t._)("td",{style:{"text-align":"left"}},"支持 4.0+ 版本")],-1),nn=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"沙哑"),(0,t._)("td",{style:{"text-align":"left"}},"从 4.0.0-1+ 开始")],-1),ln=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"笑话"),(0,t._)("td",{style:{"text-align":"left"}},"从 24.1+ 开始")],-1),tn=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"Next.js"),(0,t._)("td",{style:{"text-align":"left"}},"从 9.1.2+ 开始")],-1),an=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"包裹"),(0,t._)("td",{style:{"text-align":"left"}},"从 2.0.0-nightly.212+ 开始")],-1),sn=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"Preact CLI"),(0,t._)("td",{style:{"text-align":"left"}},"从 3.1.0+ 开始")],-1),rn=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"更漂亮"),(0,t._)("td",{style:{"text-align":"left"}},"从 1.17+ 开始")],-1),on=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"卷起"),(0,t._)("td",{style:{"text-align":"left"}},[(0,t.Uk)("从"),(0,t._)("code",null,"resolve"),(0,t.Uk)("1.9+开始")])],-1),dn=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"故事书"),(0,t._)("td",{style:{"text-align":"left"}},"从 6.0+ 开始")],-1),pn=(0,t._)("td",{style:{"text-align":"left"}},"打字稿",-1),cn={style:{"text-align":"left"}},un=(0,t.Uk)("通过"),_n={href:"https://github.com/yarnpkg/berry/tree/master/packages/plugin-compat",target:"_blank",rel:"noopener noreferrer"},gn=(0,t._)("code",null,"plugin-compat",-1),hn=(0,t.Uk)("（默认启用）"),kn=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"TypeScript-ESLint"),(0,t._)("td",{style:{"text-align":"left"}},"从 2.12+ 开始")],-1),mn=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"VSCode-Stylelint"),(0,t._)("td",{style:{"text-align":"left"}},"从 1.1+ 开始")],-1),bn=(0,t._)("td",{style:{"text-align":"left"}},"网络风暴",-1),fn={style:{"text-align":"left"}},yn=(0,t.Uk)("从 2019.3+开始；请参阅"),xn={href:"https://yarnpkg.com/getting-started/editor-sdks",target:"_blank",rel:"noopener noreferrer"},Un=(0,t.Uk)("编辑器 SDK"),vn=(0,t._)("td",{style:{"text-align":"left"}},"网页包",-1),Wn={style:{"text-align":"left"}},jn=(0,t.Uk)("从 5+ 开始（"),Pn={href:"https://github.com/arcanis/pnp-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},qn=(0,t.Uk)("插件"),wn=(0,t.Uk)("可用于 4.x）"),Nn=(0,t._)("h4",{id:"通过插件支持",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#通过插件支持","aria-hidden":"true"},"#"),(0,t.Uk)(" 通过插件支持")],-1),Sn=(0,t._)("thead",null,[(0,t._)("tr",null,[(0,t._)("th",{style:{"text-align":"left"}},"项目名"),(0,t._)("th",{style:{"text-align":"left"}},"笔记")])],-1),En=(0,t._)("td",{style:{"text-align":"left"}},"ESBuild",-1),Cn={style:{"text-align":"left"}},In=(0,t.Uk)("通过"),Yn={href:"https://github.com/yarnpkg/berry/tree/master/packages/esbuild-plugin-pnp#yarnpkgesbuild-plugin-pnp",target:"_blank",rel:"noopener noreferrer"},On=(0,t._)("code",null,"@yarnpkg/esbuild-plugin-pnp",-1),Ln=(0,t._)("td",{style:{"text-align":"left"}},"VSCode-ESLint",-1),Mn={style:{"text-align":"left"}},Dn=(0,t.Uk)("关注"),zn={href:"https://yarnpkg.com/getting-started/editor-sdks",target:"_blank",rel:"noopener noreferrer"},Fn=(0,t.Uk)("编辑器 SDK"),Zn=(0,t._)("td",{style:{"text-align":"left"}},"VSCode",-1),Vn={style:{"text-align":"left"}},An=(0,t.Uk)("关注"),Tn={href:"https://yarnpkg.com/getting-started/editor-sdks",target:"_blank",rel:"noopener noreferrer"},Kn=(0,t.Uk)("编辑器 SDK"),Bn=(0,t._)("td",{style:{"text-align":"left"}},"Webpack 4.x",-1),Gn={style:{"text-align":"left"}},Jn=(0,t.Uk)("Via "),Rn={href:"https://github.com/arcanis/pnp-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},Hn=(0,t._)("code",null,"pnp-webpack-plugin",-1),$n=(0,t.Uk)("（5 岁以上原生）"),Qn=(0,t._)("h4",{id:"不相容",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#不相容","aria-hidden":"true"},"#"),(0,t.Uk)(" 不相容")],-1),Xn=(0,t._)("p",null,"以下工具不能用于纯即插即用安装（即使在松散模式下）。",-1),el=(0,t.Uk)("**重要提示：**即使某个工具与 Plug'n'Play 不兼容，您仍然可以启用该"),nl={href:"https://github.com/yarnpkg/berry/tree/master/packages/plugin-nm",target:"_blank",rel:"noopener noreferrer"},ll=(0,t._)("code",null,"node-modules",-1),tl=(0,t.Uk)("插件"),al=(0,t.Uk)("。只需按照"),sl={href:"https://yarnpkg.com/getting-started/migration#if-required-enable-the-node-modules-plugin",target:"_blank",rel:"noopener noreferrer"},rl=(0,t.Uk)("说明操作"),ol=(0,t.Uk)("，您就可以在一分钟内准备好 🙂"),il=(0,t._)("thead",null,[(0,t._)("tr",null,[(0,t._)("th",{style:{"text-align":"left"}},"项目名"),(0,t._)("th",{style:{"text-align":"left"}},"笔记")])],-1),dl=(0,t._)("td",{style:{"text-align":"left"}},"流动",-1),pl={style:{"text-align":"left"}},cl=(0,t.Uk)("关注"),ul={href:"https://github.com/yarnpkg/berry/issues/634",target:"_blank",rel:"noopener noreferrer"},_l=(0,t.Uk)("yarnpkg/berry#634"),gl=(0,t._)("td",{style:{"text-align":"left"}},"反应原生",-1),hl={style:{"text-align":"left"}},kl=(0,t.Uk)("关注"),ml={href:"https://github.com/react-native-community/cli/issues/27",target:"_blank",rel:"noopener noreferrer"},bl=(0,t.Uk)("react-native-community/cli#27"),fl=(0,t._)("td",{style:{"text-align":"left"}},"普鲁米",-1),yl={style:{"text-align":"left"}},xl=(0,t.Uk)("关注"),Ul={href:"https://github.com/pulumi/pulumi/issues/3586",target:"_blank",rel:"noopener noreferrer"},vl=(0,t.Uk)("pulumi/pulumi#3586"),Wl=(0,t._)("td",{style:{"text-align":"left"}},"VSCode 扩展管理器 (vsce)",-1),jl={style:{"text-align":"left"}},Pl=(0,t.Uk)("使用启用插件的"),ql={href:"https://www.npmjs.com/package/vsce-yarn-patch",target:"_blank",rel:"noopener noreferrer"},wl=(0,t.Uk)("vsce-yarn-patch"),Nl=(0,t.Uk)("分支"),Sl=(0,t._)("code",null,"node-modules",-1),El=(0,t.Uk)("。"),Cl={href:"https://github.com/microsoft/vscode-vsce/pull/493",target:"_blank",rel:"noopener noreferrer"},Il=(0,t.Uk)("在合并 microsoft/vscode-vsce#493"),Yl=(0,t.Uk)("之前需要 fork ，因为"),Ol=(0,t._)("code",null,"vsce",-1),Ll=(0,t.Uk)("当前使用已删除的"),Ml=(0,t._)("code",null,"yarn list",-1),Dl=(0,t.Uk)("命令"),zl=(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"left"}},"雨果"),(0,t._)("td",{style:{"text-align":"left"}},[(0,t.Uk)("雨果管道期待一个"),(0,t._)("code",null,"node-modules"),(0,t.Uk)("目录。启用"),(0,t._)("code",null,"node-modules"),(0,t.Uk)("插件")])],-1),Fl=(0,t._)("td",{style:{"text-align":"left"}},"诏书",-1),Zl={style:{"text-align":"left"}},Vl=(0,t.Uk)("按照"),Al={href:"https://github.com/rescript-lang/rescript-compiler/issues/3276",target:"_blank",rel:"noopener noreferrer"},Tl=(0,t.Uk)("rescript-lang/rescript-compiler#3276"),Kl=(0,t._)("p",null,"此列表根据我们从 v2 开始发布的最新版本保持更新。如果您发现自己的项目中有问题，请先尝试升级 Yarn 和有问题的包，然后随时提出问题。也许是公关？😊",-1),Bl=(0,t._)("h2",{id:"经常问的问题",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#经常问的问题","aria-hidden":"true"},"#"),(0,t.Uk)(" 经常问的问题")],-1),Gl=(0,t._)("h3",{id:"为什么不使用导入地图",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#为什么不使用导入地图","aria-hidden":"true"},"#"),(0,t.Uk)(" 为什么不使用导入地图？")],-1),Jl=(0,t.Uk)("Yarn Plug'n'Play 提供语义错误（解释为什么一个包不能从另一个包访问的确切原因）和一个"),Rl={href:"https://yarnpkg.com/advanced/pnpapi",target:"_blank",rel:"noopener noreferrer"},Hl=(0,t.Uk)("合理的 JS API"),$l=(0,t.Uk)("来解决"),Ql=(0,t._)("code",null,"require.resolve",-1),Xl=(0,t.Uk)(". 这些是导入地图无法自行解决的功能。"),et={href:"https://github.com/nodejs/modules/issues/477#issuecomment-578091424",target:"_blank",rel:"noopener noreferrer"},nt=(0,t.Uk)("这在这个线程"),lt=(0,t.Uk)("中有更详细的回答。"),tt=(0,t.uE)('<p>我们今天陷入这种混乱的一个主要原因是，最初的<code>node_modules</code>设计试图将包抽象出来，以便提供一个可以在没有任何包概念的情况下工作的通用系统。这成为一个挑战，促使许多实施者提出自己的解释。导入地图也存在同样的缺陷。</p><h3 id="包存储在-zip-档案中-我如何访问他们的文件" tabindex="-1"><a class="header-anchor" href="#包存储在-zip-档案中-我如何访问他们的文件" aria-hidden="true">#</a> 包存储在 Zip 档案中：我如何访问他们的文件？</h3><p>使用 PnP 时，包被直接存储在 Zip 存档中并从缓存中访问。PnP 运行时 ( <code>.pnp.cjs</code>) 会自动修补 Node 的<code>fs</code>模块，以添加对访问 Zip 存档中文件的支持。这样，您不必做任何特别的事情：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> readFileSync <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fs</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n<span class="token comment">// Looks similar to `/path/to/.yarn/cache/lodash-npm-4.17.11-1c592398b2-8b49646c65.zip/node_modules/lodash/ceil.js`</span>\n<span class="token keyword">const</span> lodashCeilPath <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">lodash/ceil</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>lodashCeilPath<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="后备模式" tabindex="-1"><a class="header-anchor" href="#后备模式" aria-hidden="true">#</a> 后备模式</h3><p>回到 PnP 第一次实现的时候，兼容性还没有现在那么好。为了帮助过渡，我们设计了一种回退机制：如果一个包试图访问一个未列出的依赖项，<em>如果顶级包将其列为一个依赖项</em>，它仍然可以解决它。我们允许这样做是因为没有分辨率歧义，因为任何项目中都有一个顶级包。不幸的是，这可能会导致令人困惑的行为，具体取决于您的项目设置方式。当这种情况发生时，即插即用总是正确的，它在不在工作区时工作的唯一原因是由于一些额外的松懈。</p>',6),at=(0,t.Uk)("此行为只是一个补丁，最终将被删除以消除任何混乱。"),st={href:"https://yarnpkg.com/configuration/yarnrc#pnpFallbackMode",target:"_blank",rel:"noopener noreferrer"},rt=(0,t._)("code",null,"pnpFallbackMode",-1),ot=(0,t.Uk)("您现在可以通过设置来为此做准备"),it=(0,t._)("code",null,"none",-1),dt=(0,t.Uk)("，这将完全禁用回退机制。install"),pt=(0,t.uE)('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>从 npm 到 yarn，再到之后的 pnpm， ni 等安装工具</p><p>不断进步， 不断升级， 升级了哪些，又存在哪些问题</p><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><ul><li><p>嵌套安装</p><ul><li>路径过长</li><li>同一依赖， 多次安装</li></ul></li><li><p>扁平安装</p><ul><li>仅一个版本根据包的安装顺序被提升，且升级版本后，会存在新的问题（依赖提升的不确定性）</li></ul></li><li><p>npm 分身</p><ul><li>hoist 机制</li></ul></li><li><p>幽灵依赖</p><ul><li>项目未安装某个依赖，但因为安装的某个依赖中使用了该依赖， 导致可以项目中使用未安装的依赖， 但在项目升级后， 若去掉该依赖， 就会报错</li></ul><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node_modules\n└─ foo\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ bar\n         ├─ index.js\n         └─ package.json\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn" aria-hidden="true">#</a> yarn</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm" aria-hidden="true">#</a> pnpm</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> i\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="ni" tabindex="-1"><a class="header-anchor" href="#ni" aria-hidden="true">#</a> ni</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ni\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://github.com/pnpm/benchmarks-of-javascript-package-managers/raw/main/results/imgs/alotta-files.svg" alt="Graph of the alotta-files results"></p><p><img src="https://camo.githubusercontent.com/83b108abddef5c40f6afc985fa8214edc92b6f2226a83d577074a720907463c8/68747470733a2f2f706e706d2e696f2f696d672f62656e63686d61726b732f616c6f7474612d66696c65732e737667" alt="img"></p>',16),ct={},ut=(0,l(3744).Z)(ct,[["render",function(e,n){const l=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[a,(0,t._)("p",null,[s,r,o,i,d,(0,t._)("a",p,[c,(0,t.Wm)(l)]),u,_,g]),(0,t._)("ul",null,[h,(0,t._)("li",null,[k,m,b,(0,t._)("a",f,[y,(0,t.Wm)(l)]),x])]),U,v,W,j,(0,t._)("ul",null,[P,q,w,(0,t._)("li",null,[N,S,E,(0,t._)("a",C,[I,(0,t.Wm)(l)]),Y,O,L]),M]),D,(0,t._)("ul",null,[(0,t._)("li",null,[z,(0,t._)("a",F,[Z,(0,t.Wm)(l)]),V,A,T,K,B])]),G,(0,t._)("p",null,[J,R,H,$,Q,(0,t._)("a",X,[ee,(0,t.Wm)(l)]),ne,le,te]),ae,(0,t._)("blockquote",null,[(0,t._)("p",null,[se,(0,t._)("a",re,[oe,(0,t.Wm)(l)]),ie,de,(0,t._)("a",pe,[ce,(0,t.Wm)(l)])])]),(0,t._)("p",null,[ue,(0,t._)("a",_e,[ge,(0,t.Wm)(l)]),he]),(0,t._)("p",null,[ke,(0,t._)("a",me,[be,(0,t.Wm)(l)]),fe]),ye,(0,t._)("p",null,[xe,Ue,ve,(0,t._)("a",We,[je,(0,t.Wm)(l)]),Pe,qe,we,(0,t._)("a",Ne,[Se,(0,t.Wm)(l)]),Ee]),Ce,(0,t._)("p",null,[(0,t._)("a",Ie,[Ye,Oe,Le,(0,t.Wm)(l)])]),Me,(0,t._)("p",null,[(0,t._)("strong",null,[(0,t._)("a",De,[ze,(0,t.Wm)(l)])])]),Fe,Ze,(0,t._)("table",null,[Ve,(0,t._)("tbody",null,[Ae,Te,Ke,Be,(0,t._)("tr",null,[Ge,(0,t._)("td",Je,[Re,(0,t._)("a",He,[$e,(0,t.Wm)(l)]),Qe])]),Xe,en,nn,ln,tn,an,sn,rn,on,dn,(0,t._)("tr",null,[pn,(0,t._)("td",cn,[un,(0,t._)("a",_n,[gn,(0,t.Wm)(l)]),hn])]),kn,mn,(0,t._)("tr",null,[bn,(0,t._)("td",fn,[yn,(0,t._)("a",xn,[Un,(0,t.Wm)(l)])])]),(0,t._)("tr",null,[vn,(0,t._)("td",Wn,[jn,(0,t._)("a",Pn,[qn,(0,t.Wm)(l)]),wn])])])]),Nn,(0,t._)("table",null,[Sn,(0,t._)("tbody",null,[(0,t._)("tr",null,[En,(0,t._)("td",Cn,[In,(0,t._)("a",Yn,[On,(0,t.Wm)(l)])])]),(0,t._)("tr",null,[Ln,(0,t._)("td",Mn,[Dn,(0,t._)("a",zn,[Fn,(0,t.Wm)(l)])])]),(0,t._)("tr",null,[Zn,(0,t._)("td",Vn,[An,(0,t._)("a",Tn,[Kn,(0,t.Wm)(l)])])]),(0,t._)("tr",null,[Bn,(0,t._)("td",Gn,[Jn,(0,t._)("a",Rn,[Hn,(0,t.Wm)(l)]),$n])])])]),Qn,Xn,(0,t._)("p",null,[el,(0,t._)("a",nl,[ll,tl,(0,t.Wm)(l)]),al,(0,t._)("a",sl,[rl,(0,t.Wm)(l)]),ol]),(0,t._)("table",null,[il,(0,t._)("tbody",null,[(0,t._)("tr",null,[dl,(0,t._)("td",pl,[cl,(0,t._)("a",ul,[_l,(0,t.Wm)(l)])])]),(0,t._)("tr",null,[gl,(0,t._)("td",hl,[kl,(0,t._)("a",ml,[bl,(0,t.Wm)(l)])])]),(0,t._)("tr",null,[fl,(0,t._)("td",yl,[xl,(0,t._)("a",Ul,[vl,(0,t.Wm)(l)])])]),(0,t._)("tr",null,[Wl,(0,t._)("td",jl,[Pl,(0,t._)("a",ql,[wl,(0,t.Wm)(l)]),Nl,Sl,El,(0,t._)("a",Cl,[Il,(0,t.Wm)(l)]),Yl,Ol,Ll,Ml,Dl])]),zl,(0,t._)("tr",null,[Fl,(0,t._)("td",Zl,[Vl,(0,t._)("a",Al,[Tl,(0,t.Wm)(l)])])])])]),Kl,Bl,Gl,(0,t._)("p",null,[Jl,(0,t._)("a",Rl,[Hl,(0,t.Wm)(l)]),$l,Ql,Xl,(0,t._)("a",et,[nt,(0,t.Wm)(l)]),lt]),tt,(0,t._)("p",null,[at,(0,t._)("a",st,[rt,(0,t.Wm)(l)]),ot,it,dt]),pt],64)}]])},3744:(e,n)=>{n.Z=(e,n)=>{const l=e.__vccOpts||e;for(const[e,t]of n)l[e]=t;return l}}}]);