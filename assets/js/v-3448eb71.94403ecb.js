"use strict";(self.webpackChunkmd_vuepress=self.webpackChunkmd_vuepress||[]).push([[9833],{9103:(e,i,l)=>{l.r(i),l.d(i,{data:()=>t});const t={key:"v-3448eb71",path:"/TypeScript/",title:"TypeScript",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是 Typescript？",slug:"什么是-typescript",children:[]},{level:2,title:"什么是 Typescript？",slug:"什么是-typescript-1",children:[]},{level:2,title:"Typescript 有哪些基础类型？",slug:"typescript-有哪些基础类型",children:[]}],filePathRelative:"TypeScript/README.md",git:{updatedTime:1631992389e3}}},6854:(e,i,l)=>{l.r(i),l.d(i,{default:()=>r});const t=(0,l(6252).uE)('<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h2 id="什么是-typescript" tabindex="-1"><a class="header-anchor" href="#什么是-typescript" aria-hidden="true">#</a> 什么是 Typescript？</h2><blockquote><p>Typescript 是强类型的 Javascript 超集，支持 ES6 语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript 并不直接在浏览器上运行，需要编译器编译成纯 Javascript 来运行。</p></blockquote><h2 id="什么是-typescript-1" tabindex="-1"><a class="header-anchor" href="#什么是-typescript-1" aria-hidden="true">#</a> 什么是 Typescript？</h2><blockquote><p>优点:</p><ol><li>快速简单，易于学习。</li><li>编译时提供错误检查， 在代码运行前就会进行错误提示。</li><li>支持所有的 JS 库。</li><li>支持 ES6，提供了 ES6 所有优点和更高的生产力。</li><li>使用继承提供可重用性。</li><li>有助于代码结构。</li><li>通过定义模块来定义命名空间。</li></ol><p>缺点:</p><ol><li>需要长时间的来编译代码。</li><li>在使用第三方库时，需要有三方库的定义文件，并不是所有三方库都提供了定义文件，提供的定义文件是否准确也值得商榷。</li></ol></blockquote><h2 id="typescript-有哪些基础类型" tabindex="-1"><a class="header-anchor" href="#typescript-有哪些基础类型" aria-hidden="true">#</a> Typescript 有哪些基础类型？</h2><blockquote><ol><li>number</li><li>string</li><li>boolean</li><li>Symbol</li><li>Array</li><li>Tuple(元组)</li><li>enum(枚举)</li><li>object</li><li>never 表示那些永不存在的值类型。如总是抛出异常或者根本不会有返回值的函数的返回值类型。</li><li>void 与 any 相反表示没有任何类型。函数没有返回值时用 void。</li><li>null 和 undefined 它们是所有类型的子类型。当你指定 structNullChecks 时，它们只能赋值给 void 或者它们自己本身。</li><li>any</li></ol></blockquote>',7),r={render:function(e,i){return t}}}}]);